{"ast":null,"code":"useEffect(() => {\n  const fetchEmployeeData = async () => {\n    try {\n      // Fetch data from the APIs\n      const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails')]);\n      const employeeData = employeeResponse.data;\n      const timesheetData = timesheetResponse.data;\n      const companyDetailsData = companyDetailsResponse.data;\n\n      // Create a map for company IDs to company names\n      const companyMap = companyDetailsData.reduce((acc, company) => {\n        acc[company.company_id] = company.company_name;\n        return acc;\n      }, {});\n      console.log(\"Company Map: \", companyMap);\n\n      // Create a map of employees with their respective project names\n      const employeeProjectsMap = timesheetData.reduce((acc, timesheetEntry) => {\n        const userId = timesheetEntry.User_Id; // Ensure this is the correct field name\n        const projectId = timesheetEntry.project; // Ensure this is the correct field name\n        const projectName = companyMap[projectId] || 'Unknown Project';\n        if (!acc[userId]) {\n          acc[userId] = new Set(); // Use a Set to avoid duplicate project names\n        }\n        acc[userId].add(projectName);\n        return acc;\n      }, {});\n\n      // Convert Sets back to comma-separated strings for display\n      const employeeProjectsListMap = Object.fromEntries(Object.entries(employeeProjectsMap).map(([userId, projectSet]) => [userId, [...projectSet].join(', ')]));\n      console.log(\"Employee Projects Map: \", employeeProjectsMap);\n\n      // Combine employee data with their project names\n      const combinedData = employeeData.map(employee => {\n        const employeeProjectsList = employeeProjectsListMap[employee.Emp_ID] || 'No project assigned';\n        return {\n          name: employee.User_Fname || 'N/A',\n          email: employee.User_Email || 'N/A',\n          status: employee.User_Status || 'N/A',\n          projects: employeeProjectsList\n        };\n      });\n      console.log(\"Combined Data: \", combinedData);\n      setEmployeesData(combinedData);\n    } catch (error) {\n      setError('An error occurred while fetching employee data.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  fetchEmployeeData();\n}, []);","map":{"version":3,"names":["useEffect","fetchEmployeeData","employeeResponse","timesheetResponse","companyDetailsResponse","Promise","all","axios","get","employeeData","data","timesheetData","companyDetailsData","companyMap","reduce","acc","company","company_id","company_name","console","log","employeeProjectsMap","timesheetEntry","userId","User_Id","projectId","project","projectName","Set","add","employeeProjectsListMap","Object","fromEntries","entries","map","projectSet","join","combinedData","employee","employeeProjectsList","Emp_ID","name","User_Fname","email","User_Email","status","User_Status","projects","setEmployeesData","error","setError","setLoading"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["useEffect(() => {\n    const fetchEmployeeData = async () => {\n      try {\n        // Fetch data from the APIs\n        const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([\n          axios.get('http://localhost:5001/Employee_Data1'),\n          axios.get('http://localhost:5001/timesheet'),\n          axios.get('http://localhost:5001/CompanyDetails'),\n        ]);\n  \n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const companyDetailsData = companyDetailsResponse.data;\n  \n        // Create a map for company IDs to company names\n        const companyMap = companyDetailsData.reduce((acc, company) => {\n          acc[company.company_id] = company.company_name;\n          return acc;\n        }, {});\n  \n        console.log(\"Company Map: \", companyMap);\n  \n        // Create a map of employees with their respective project names\n        const employeeProjectsMap = timesheetData.reduce((acc, timesheetEntry) => {\n          const userId = timesheetEntry.User_Id; // Ensure this is the correct field name\n          const projectId = timesheetEntry.project; // Ensure this is the correct field name\n          const projectName = companyMap[projectId] || 'Unknown Project';\n  \n          if (!acc[userId]) {\n            acc[userId] = new Set(); // Use a Set to avoid duplicate project names\n          }\n          acc[userId].add(projectName);\n  \n          return acc;\n        }, {});\n  \n        // Convert Sets back to comma-separated strings for display\n        const employeeProjectsListMap = Object.fromEntries(\n          Object.entries(employeeProjectsMap).map(([userId, projectSet]) => [userId, [...projectSet].join(', ')])\n        );\n  \n        console.log(\"Employee Projects Map: \", employeeProjectsMap);\n  \n        // Combine employee data with their project names\n        const combinedData = employeeData.map((employee) => {\n          const employeeProjectsList = employeeProjectsListMap[employee.Emp_ID] || 'No project assigned';\n  \n          return {\n            name: employee.User_Fname || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            projects: employeeProjectsList,\n          };\n        });\n  \n        console.log(\"Combined Data: \", combinedData);\n  \n        setEmployeesData(combinedData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    fetchEmployeeData();\n  }, []);\n  "],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACZ,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF;MACA,MAAM,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,sBAAsB,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACtFC,KAAK,CAACC,GAAG,CAAC,sCAAsC,CAAC,EACjDD,KAAK,CAACC,GAAG,CAAC,iCAAiC,CAAC,EAC5CD,KAAK,CAACC,GAAG,CAAC,sCAAsC,CAAC,CAClD,CAAC;MAEF,MAAMC,YAAY,GAAGP,gBAAgB,CAACQ,IAAI;MAC1C,MAAMC,aAAa,GAAGR,iBAAiB,CAACO,IAAI;MAC5C,MAAME,kBAAkB,GAAGR,sBAAsB,CAACM,IAAI;;MAEtD;MACA,MAAMG,UAAU,GAAGD,kBAAkB,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;QAC7DD,GAAG,CAACC,OAAO,CAACC,UAAU,CAAC,GAAGD,OAAO,CAACE,YAAY;QAC9C,OAAOH,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;MAENI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEP,UAAU,CAAC;;MAExC;MACA,MAAMQ,mBAAmB,GAAGV,aAAa,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEO,cAAc,KAAK;QACxE,MAAMC,MAAM,GAAGD,cAAc,CAACE,OAAO,CAAC,CAAC;QACvC,MAAMC,SAAS,GAAGH,cAAc,CAACI,OAAO,CAAC,CAAC;QAC1C,MAAMC,WAAW,GAAGd,UAAU,CAACY,SAAS,CAAC,IAAI,iBAAiB;QAE9D,IAAI,CAACV,GAAG,CAACQ,MAAM,CAAC,EAAE;UAChBR,GAAG,CAACQ,MAAM,CAAC,GAAG,IAAIK,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3B;QACAb,GAAG,CAACQ,MAAM,CAAC,CAACM,GAAG,CAACF,WAAW,CAAC;QAE5B,OAAOZ,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEN;MACA,MAAMe,uBAAuB,GAAGC,MAAM,CAACC,WAAW,CAChDD,MAAM,CAACE,OAAO,CAACZ,mBAAmB,CAAC,CAACa,GAAG,CAAC,CAAC,CAACX,MAAM,EAAEY,UAAU,CAAC,KAAK,CAACZ,MAAM,EAAE,CAAC,GAAGY,UAAU,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACxG,CAAC;MAEDjB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,mBAAmB,CAAC;;MAE3D;MACA,MAAMgB,YAAY,GAAG5B,YAAY,CAACyB,GAAG,CAAEI,QAAQ,IAAK;QAClD,MAAMC,oBAAoB,GAAGT,uBAAuB,CAACQ,QAAQ,CAACE,MAAM,CAAC,IAAI,qBAAqB;QAE9F,OAAO;UACLC,IAAI,EAAEH,QAAQ,CAACI,UAAU,IAAI,KAAK;UAClCC,KAAK,EAAEL,QAAQ,CAACM,UAAU,IAAI,KAAK;UACnCC,MAAM,EAAEP,QAAQ,CAACQ,WAAW,IAAI,KAAK;UACrCC,QAAQ,EAAER;QACZ,CAAC;MACH,CAAC,CAAC;MAEFpB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEiB,YAAY,CAAC;MAE5CW,gBAAgB,CAACX,YAAY,CAAC;IAChC,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdC,QAAQ,CAAC,iDAAiD,CAAC;IAC7D,CAAC,SAAS;MACRC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDlD,iBAAiB,CAAC,CAAC;AACrB,CAAC,EAAE,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}