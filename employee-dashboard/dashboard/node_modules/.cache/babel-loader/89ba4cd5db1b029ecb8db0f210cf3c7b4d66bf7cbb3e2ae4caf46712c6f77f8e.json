{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  useEffect(() => {\n    const fetchEmployeeData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n\n        // Clean the company details data\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n        // Process unique user_id and project pairs\n        const userProjectCompanyMap = new Map();\n        timesheetData.forEach(entry => {\n          const {\n            User_Id,\n            project\n          } = entry;\n          const company = companyDetailsData.find(company => company.company_id === project);\n          if (company) {\n            userProjectCompanyMap.set(`${User_Id}-${project}`, company.company_name);\n          }\n        });\n\n        // console.log(\"Mapped User_Id, Project, and Company_Name:\");\n        // userProjectCompanyMap.forEach((companyName, key) => {\n        //   const [userId, project] = key.split('-');\n        //   const employee = employeeData.find(emp => emp.Emp_ID === userId);\n        //   if (employee) {\n        //     const fullName = `${employee.User_Fname} ${employee.User_Lname}`;\n        //     console.log(`User_Id: ${userId}, Project: ${project}, Company_Name: ${companyName}, Full Name: ${fullName}`);\n        //   } else {\n        //     console.log(`User_Id: ${userId}, Project: ${project}, Company_Name: ${companyName}`);\n        //   }\n        // });\n\n        // Process employee data for display in table\n        const processedData = employeeData.map(employee => {\n          const projectInfo = timesheetData.find(timesheet => timesheet.User_Id === employee.Emp_ID);\n          const companyName = projectInfo ? userProjectCompanyMap.get(`${employee.Emp_ID}-${projectInfo.project}`) : 'No project assigned';\n          return {\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            // project: projectInfo ? projectInfo.project : 'No project assigned',\n            companyName: companyName || 'N/A'\n          };\n        });\n        setEmployeesData(processedData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchEmployeeData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Employees Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), loading && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Employee Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Project\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Company Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: employeesData.map((employee, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.project\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.companyName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(Overview, \"55THOB/m7eZcGNdMGjyDf1FNpOg=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","fetchEmployeeData","employeeResponse","timesheetResponse","companyDetailsResponse","Promise","all","get","employeeData","timesheetData","rawCompanyDetailsData","companyDetailsData","userProjectCompanyMap","Map","forEach","entry","User_Id","project","company","find","company_id","set","company_name","processedData","employee","projectInfo","timesheet","Emp_ID","companyName","name","User_Fname","User_Lname","email","User_Email","status","User_Status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\n\nconst Overview = () => {\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const cleanFieldNames = (data) => {\n    return data.map((item) => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n\n  useEffect(() => {\n    const fetchEmployeeData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([\n          axios.get('http://localhost:5001/Employee_Data1'),\n          axios.get('http://localhost:5001/timesheet'),\n          axios.get('http://localhost:5001/CompanyDetails'),\n        ]);\n\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n\n        // Clean the company details data\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n        // Process unique user_id and project pairs\n        const userProjectCompanyMap = new Map();\n        timesheetData.forEach((entry) => {\n          const { User_Id, project } = entry;\n          const company = companyDetailsData.find(\n            (company) => company.company_id === project\n          );\n\n          if (company) {\n            userProjectCompanyMap.set(`${User_Id}-${project}`, company.company_name);\n          }\n        });\n\n        // console.log(\"Mapped User_Id, Project, and Company_Name:\");\n        // userProjectCompanyMap.forEach((companyName, key) => {\n        //   const [userId, project] = key.split('-');\n        //   const employee = employeeData.find(emp => emp.Emp_ID === userId);\n        //   if (employee) {\n        //     const fullName = `${employee.User_Fname} ${employee.User_Lname}`;\n        //     console.log(`User_Id: ${userId}, Project: ${project}, Company_Name: ${companyName}, Full Name: ${fullName}`);\n        //   } else {\n        //     console.log(`User_Id: ${userId}, Project: ${project}, Company_Name: ${companyName}`);\n        //   }\n        // });\n\n        // Process employee data for display in table\n        const processedData = employeeData.map((employee) => {\n          const projectInfo = timesheetData.find((timesheet) => timesheet.User_Id === employee.Emp_ID);\n          const companyName = projectInfo\n            ? userProjectCompanyMap.get(`${employee.Emp_ID}-${projectInfo.project}`)\n            : 'No project assigned';\n\n          return {\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            // project: projectInfo ? projectInfo.project : 'No project assigned',\n            companyName: companyName || 'N/A',\n          };\n        });\n\n        setEmployeesData(processedData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchEmployeeData();\n  }, []);\n\n  return (\n    <div className=\"Overview-container\">\n      <h1 className=\"title\">Employee Details</h1>\n      <div className=\"EmployeeTable\">\n        <h2>Employees Details</h2>\n        {loading && !error ? (\n          <p>Loading...</p>\n        ) : error ? (\n          <p>{error}</p>\n        ) : (\n          <table>\n            <thead>\n              <tr>\n                <th>Employee Name</th>\n                <th>Email</th>\n                <th>Status</th>\n                <th>Project</th>\n                <th>Company Name</th>\n              </tr>\n            </thead>\n            <tbody>\n              {employeesData.map((employee, index) => (\n                <tr key={index}>\n                  <td>{employee.name}</td>\n                  <td>{employee.email}</td>\n                  <td>{employee.status}</td>\n                  <td>{employee.project}</td>\n                  <td>{employee.companyName}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}