{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport BarChart from './BarChart'; // Import the new BarChart component\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalEmployees, setTotalEmployees] = useState(0);\n  const [totalHours, setTotalHours] = useState({\n    hours: 0,\n    mins: 0\n  });\n  const [statusCounts, setStatusCounts] = useState({});\n  const [projectCounts, setProjectCounts] = useState({});\n  const [pagination, setPagination] = useState({\n    pageIndex: 0,\n    pageSize: 5 // Set the default page size\n  });\n  const fetchData = async () => {\n    try {\n      const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails'), axios.get('http://localhost:5001/Modules_Tasks')]);\n      const employeeData = employeeResponse.data;\n      const timesheetData = timesheetResponse.data;\n      const rawCompanyDetailsData = companyDetailsResponse.data;\n      const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n      const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n      const userProjectTaskMap = new Map();\n      timesheetData.forEach(entry => {\n        const {\n          User_Id,\n          project,\n          task\n        } = entry;\n        const company = companyDetailsData.find(company => company.company_id === project);\n        const taskDetails = moduleTaskData.find(module => module.m_slno === task);\n        if (company || taskDetails) {\n          if (!userProjectTaskMap.has(User_Id)) {\n            userProjectTaskMap.set(User_Id, {\n              projects: new Set(),\n              tasks: new Set()\n            });\n          }\n          if (company) {\n            userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n          }\n          if (taskDetails) {\n            userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n          }\n        }\n      });\n      const statusCounts = timesheetData.reduce((acc, item) => {\n        acc[item.Status] = (acc[item.Status] || 0) + 1;\n        return acc;\n      }, {});\n      setStatusCounts(statusCounts);\n\n      //   const projectCounts = calculateProjectCounts(userProjectTaskMap);\n      //   setProjectCounts(projectCounts);\n\n      const projectCounts = {};\n      employeeData.forEach(employee => {\n        var _userProjectTaskMap$g;\n        const projects = ((_userProjectTaskMap$g = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g === void 0 ? void 0 : _userProjectTaskMap$g.projects) || new Set();\n        projects.forEach(project => {\n          if (!projectCounts[project]) {\n            projectCounts[project] = 0;\n          }\n          projectCounts[project] += 1; // Increment the count for each project the employee is working on\n        });\n      });\n      setProjectCounts(projectCounts);\n      const processedData = employeeData.map(employee => {\n        var _userProjectTaskMap$g2, _userProjectTaskMap$g3;\n        const projectSet = ((_userProjectTaskMap$g2 = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g2 === void 0 ? void 0 : _userProjectTaskMap$g2.projects) || new Set();\n        const taskSet = ((_userProjectTaskMap$g3 = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g3 === void 0 ? void 0 : _userProjectTaskMap$g3.tasks) || new Set();\n        const formattedProjects = [...projectSet].length > 0 ? [...projectSet].join(', ') : 'No project assigned';\n        const formattedTasks = [...taskSet].length > 0 ? [...taskSet].join(', ') : 'No task assigned';\n        return {\n          id: employee.Emp_ID,\n          name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n          email: employee.User_Email || 'N/A',\n          status: employee.User_Status || 'N/A',\n          companyName: formattedProjects,\n          taskName: formattedTasks\n        };\n      });\n\n      // const customSearchFunction = (rows, searchText) => {\n      //     return rows.filter((row) => {\n      //       // Convert both row name and search text to lowercase to ensure case-insensitive matching\n      //       const fullName = row.original.name.toLowerCase();\n      //       const query = searchText.toLowerCase();\n\n      //       // Return rows where the name contains the exact search text\n      //       return fullName.includes(query);\n      //     });\n      //   };\n\n      const totalMinutes = calculateTotalHours(timesheetData);\n      const processedDataWithHours = processedData.map(employee => ({\n        ...employee,\n        totalHours: totalMinutes[employee.id] ? convertToHoursAndMinutes(totalMinutes[employee.id]) : {\n          hours: 0,\n          mins: 0\n        }\n      }));\n\n      // Only update state if data has changed\n      if (JSON.stringify(processedDataWithHours) !== JSON.stringify(employeesData)) {\n        setEmployeesData(processedDataWithHours);\n        setTotalEmployees(processedDataWithHours.length);\n      }\n    } catch (error) {\n      setError('An error occurred while fetching employee data.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n  }, [employeesData]);\n  const columns = useMemo(() => [{\n    accessorKey: 'name',\n    header: 'Employee Name',\n    size: 150\n  }, {\n    accessorKey: 'email',\n    header: 'Email',\n    size: 200\n  }, {\n    accessorKey: 'status',\n    header: 'Employee Status',\n    size: 150\n  }, {\n    accessorKey: 'companyName',\n    header: 'Project',\n    size: 200\n  }, {\n    accessorKey: 'taskName',\n    header: 'Task',\n    size: 200\n  }, {\n    accessorKey: 'totalHours',\n    header: 'Time',\n    size: 150,\n    Cell: ({\n      cell\n    }) => `${cell.getValue().hours} hrs ${cell.getValue().mins} mins`\n  }], []);\n  const table = useMaterialReactTable({\n    columns,\n    data: employeesData,\n    state: {\n      isLoading: loading,\n      pagination\n    },\n    onPaginationChange: setPagination,\n    enableFullScreenToggle: false,\n    globalFilterFn: 'contains'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Time Sheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counts-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"EmployeeCount\",\n        children: [\"Total Number of Employees: \", totalEmployees]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"TimeCount\",\n        children: [\"Total Time: \", totalHours.hours, \" hrs \", totalHours.mins, \" mins\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(MaterialReactTable, {\n        table: table\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Status Breakdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n            data: Object.entries(statusCounts).map(([key, value]) => ({\n              name: key,\n              value\n            })),\n            title: \"Employee Status Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Projects Breakdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n            data: Object.entries(projectCounts).map(([key, value]) => ({\n              name: key,\n              value\n            })),\n            title: \"Projects Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(Overview, \"gbYvkRUdfMoIZDhtRLF3bTv8JAM=\", false, function () {\n  return [useMaterialReactTable];\n});\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","MaterialReactTable","useMaterialReactTable","BarChart","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","totalEmployees","setTotalEmployees","totalHours","setTotalHours","hours","mins","statusCounts","setStatusCounts","projectCounts","setProjectCounts","pagination","setPagination","pageIndex","pageSize","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","moduleTaskResponse","Promise","all","get","employeeData","data","timesheetData","rawCompanyDetailsData","moduleTaskData","cleanFieldNames","companyDetailsData","userProjectTaskMap","Map","forEach","entry","User_Id","project","task","company","find","company_id","taskDetails","module","m_slno","has","set","projects","Set","tasks","add","company_name","mod_name","reduce","acc","item","Status","employee","_userProjectTaskMap$g","Emp_ID","processedData","map","_userProjectTaskMap$g2","_userProjectTaskMap$g3","projectSet","taskSet","formattedProjects","length","join","formattedTasks","id","name","User_Fname","User_Lname","email","User_Email","status","User_Status","companyName","taskName","totalMinutes","calculateTotalHours","processedDataWithHours","convertToHoursAndMinutes","JSON","stringify","interval","setInterval","clearInterval","columns","accessorKey","header","size","Cell","cell","getValue","table","state","isLoading","onPaginationChange","enableFullScreenToggle","globalFilterFn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","key","value","title","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport BarChart from './BarChart'; // Import the new BarChart component\nimport './Overview.css';\n\nconst Overview = () => {\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalEmployees, setTotalEmployees] = useState(0);\n  const [totalHours, setTotalHours] = useState({ hours: 0, mins: 0 });\n  const [statusCounts, setStatusCounts] = useState({});\n  const [projectCounts, setProjectCounts] = useState({});\n  const [pagination, setPagination] = useState({\n    pageIndex: 0,\n    pageSize: 5, // Set the default page size\n  });\n\n  const fetchData = async () => {\n        try {\n            const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([\n                axios.get('http://localhost:5001/Employee_Data1'),\n                axios.get('http://localhost:5001/timesheet'),\n                axios.get('http://localhost:5001/CompanyDetails'),\n                axios.get('http://localhost:5001/Modules_Tasks'),\n            ]);\n\n            const employeeData = employeeResponse.data;\n            const timesheetData = timesheetResponse.data;\n            const rawCompanyDetailsData = companyDetailsResponse.data;\n            const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n            const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n            const userProjectTaskMap = new Map();\n            timesheetData.forEach((entry) => {\n                const { User_Id, project, task } = entry;\n                const company = companyDetailsData.find(\n                    (company) => company.company_id === project\n                );\n                const taskDetails = moduleTaskData.find(\n                    (module) => module.m_slno === task\n                );\n\n                if (company || taskDetails) {\n                    if (!userProjectTaskMap.has(User_Id)) {\n                        userProjectTaskMap.set(User_Id, { projects: new Set(), tasks: new Set() });\n                    }\n\n                    if (company) {\n                        userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n                    }\n\n                    if (taskDetails) {\n                        userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n                    }\n                }\n            });\n\n            const statusCounts = timesheetData.reduce((acc, item) => {\n                acc[item.Status] = (acc[item.Status] || 0) + 1;\n                return acc;\n            }, {});\n            setStatusCounts(statusCounts);\n\n\n            //   const projectCounts = calculateProjectCounts(userProjectTaskMap);\n            //   setProjectCounts(projectCounts);\n\n            const projectCounts = {};\n            employeeData.forEach((employee) => {\n                const projects = userProjectTaskMap.get(employee.Emp_ID)?.projects || new Set();\n\n                projects.forEach((project) => {\n                    if (!projectCounts[project]) {\n                        projectCounts[project] = 0;\n                    }\n                    projectCounts[project] += 1; // Increment the count for each project the employee is working on\n                });\n            });\n\n            setProjectCounts(projectCounts);\n\n\n            const processedData = employeeData.map((employee) => {\n                const projectSet = userProjectTaskMap.get(employee.Emp_ID)?.projects || new Set();\n                const taskSet = userProjectTaskMap.get(employee.Emp_ID)?.tasks || new Set();\n\n                const formattedProjects = [...projectSet].length > 0\n                    ? [...projectSet].join(', ')\n                    : 'No project assigned';\n\n                const formattedTasks = [...taskSet].length > 0\n                    ? [...taskSet].join(', ')\n                    : 'No task assigned';\n\n                return {\n                    id: employee.Emp_ID,\n                    name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n                    email: employee.User_Email || 'N/A',\n                    status: employee.User_Status || 'N/A',\n                    companyName: formattedProjects,\n                    taskName: formattedTasks,\n                };\n            });\n\n            // const customSearchFunction = (rows, searchText) => {\n            //     return rows.filter((row) => {\n            //       // Convert both row name and search text to lowercase to ensure case-insensitive matching\n            //       const fullName = row.original.name.toLowerCase();\n            //       const query = searchText.toLowerCase();\n                  \n            //       // Return rows where the name contains the exact search text\n            //       return fullName.includes(query);\n            //     });\n            //   };\n\n            const totalMinutes = calculateTotalHours(timesheetData);\n            const processedDataWithHours = processedData.map((employee) => ({\n                ...employee,\n                totalHours: totalMinutes[employee.id] ? convertToHoursAndMinutes(totalMinutes[employee.id]) : { hours: 0, mins: 0 },\n            }));\n\n            // Only update state if data has changed\n            if (JSON.stringify(processedDataWithHours) !== JSON.stringify(employeesData)) {\n                setEmployeesData(processedDataWithHours);\n                setTotalEmployees(processedDataWithHours.length);\n            }\n\n        } catch (error) {\n            setError('An error occurred while fetching employee data.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n  }, [employeesData]);\n\n  const columns = useMemo(() => [\n    {\n      accessorKey: 'name',\n      header: 'Employee Name',\n      size: 150,\n    },\n    {\n      accessorKey: 'email',\n      header: 'Email',\n      size: 200,\n    },\n    {\n      accessorKey: 'status',\n      header: 'Employee Status',\n      size: 150,\n    },\n    {\n      accessorKey: 'companyName',\n      header: 'Project',\n      size: 200,\n    },\n    {\n      accessorKey: 'taskName',\n      header: 'Task',\n      size: 200,\n    },\n    {\n      accessorKey: 'totalHours',\n      header: 'Time',\n      size: 150,\n      Cell: ({ cell }) => `${cell.getValue().hours} hrs ${cell.getValue().mins} mins`,\n    },\n  ], []);\n\n  const table = useMaterialReactTable({\n    columns,\n    data: employeesData,\n    state: { isLoading: loading, pagination },\n    onPaginationChange: setPagination,\n    enableFullScreenToggle: false,\n    globalFilterFn: 'contains',\n  });\n\n  return (\n    <div className=\"Overview-container\">\n      <h1 className=\"title\">Employee Time Sheet</h1>\n      <div className=\"counts-container\">\n        <p className=\"EmployeeCount\">Total Number of Employees: {totalEmployees}</p>\n        <p className=\"TimeCount\">Total Time: {totalHours.hours} hrs {totalHours.mins} mins</p>\n      </div>\n      <div className=\"EmployeeTable\">\n        {error ? (\n          <p className=\"error-text\">{error}</p>\n        ) : (\n          <MaterialReactTable table={table} />\n        )}\n      </div>\n      <div className=\"final-container\">\n        <div className=\"chart-container\">\n          <div className=\"chart1\">\n            <h2>Status Breakdown</h2>\n            <BarChart\n              data={Object.entries(statusCounts).map(([key, value]) => ({ name: key, value }))}\n              title=\"Employee Status Distribution\"\n            />\n          </div>\n        </div>\n        <div className=\"chart-container\">\n          <div className=\"chart2\">\n            <h2>Projects Breakdown</h2>\n            <BarChart\n              data={Object.entries(projectCounts).map(([key, value]) => ({ name: key, value }))}\n              title=\"Projects Distribution\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}