{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  useEffect(() => {\n    const fetchEmployeeData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n\n        // Clean the company details data\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n        // Process user-project-company matching\n        const userProjectCompanyMap = new Map();\n        timesheetData.forEach(entry => {\n          const {\n            User_Id,\n            project\n          } = entry;\n          const company = companyDetailsData.find(company => company.company_id === project);\n          if (company) {\n            const key = `${User_Id}-${project}`;\n            if (!userProjectCompanyMap.has(key)) {\n              userProjectCompanyMap.set(key, {\n                User_Id,\n                project,\n                company_names: [company.company_name]\n              });\n            } else {\n              const existingEntry = userProjectCompanyMap.get(key);\n              existingEntry.company_names.push(company.company_name);\n            }\n          }\n        });\n\n        // Convert the map to an array for rendering\n        const userProjectCompanyArray = Array.from(userProjectCompanyMap.values());\n        console.log(\"User-Project-Company details:\");\n        userProjectCompanyArray.forEach(entry => {\n          console.log(`User_Id: ${entry.User_Id}, Project: ${entry.project}, Company_Names: ${entry.company_names.join(', ')}`);\n        });\n\n        // You can also handle employee display as needed\n        const processedData = employeeData.map(employee => ({\n          name: employee.User_Fname + \" \" + employee.User_Lname || 'N/A',\n          email: employee.User_Email || 'N/A',\n          status: employee.User_Status || 'N/A'\n        }));\n        setEmployeesData(processedData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchEmployeeData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"User Project Company Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), loading && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"User ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Project\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Company Name(s)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Array.from(userProjectCompanyMap.values()).map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: entry.User_Id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entry.project\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entry.company_names.join(', ')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(Overview, \"55THOB/m7eZcGNdMGjyDf1FNpOg=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","fetchEmployeeData","employeeResponse","timesheetResponse","companyDetailsResponse","Promise","all","get","employeeData","timesheetData","rawCompanyDetailsData","companyDetailsData","userProjectCompanyMap","Map","forEach","entry","User_Id","project","company","find","company_id","has","set","company_names","company_name","existingEntry","push","userProjectCompanyArray","Array","from","values","console","log","join","processedData","employee","name","User_Fname","User_Lname","email","User_Email","status","User_Status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\n\nconst Overview = () => {\n    const [employeesData, setEmployeesData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const cleanFieldNames = (data) => {\n        return data.map(item => {\n            const cleanedItem = {};\n            for (const [key, value] of Object.entries(item)) {\n                const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n                cleanedItem[cleanedKey] = value;\n            }\n            return cleanedItem;\n        });\n    };\n\n    useEffect(() => {\n        const fetchEmployeeData = async () => {\n            try {\n                const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([\n                    axios.get('http://localhost:5001/Employee_Data1'),\n                    axios.get('http://localhost:5001/timesheet'),\n                    axios.get('http://localhost:5001/CompanyDetails'),\n                ]);\n\n                const employeeData = employeeResponse.data;\n                const timesheetData = timesheetResponse.data;\n                const rawCompanyDetailsData = companyDetailsResponse.data;\n\n                // Clean the company details data\n                const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n                // Process user-project-company matching\n                const userProjectCompanyMap = new Map();\n\n                timesheetData.forEach((entry) => {\n                    const { User_Id, project } = entry;\n                    const company = companyDetailsData.find(company => company.company_id === project);\n                    if (company) {\n                        const key = `${User_Id}-${project}`;\n                        if (!userProjectCompanyMap.has(key)) {\n                            userProjectCompanyMap.set(key, {\n                                User_Id,\n                                project,\n                                company_names: [company.company_name]\n                            });\n                        } else {\n                            const existingEntry = userProjectCompanyMap.get(key);\n                            existingEntry.company_names.push(company.company_name);\n                        }\n                    }\n                });\n\n                // Convert the map to an array for rendering\n                const userProjectCompanyArray = Array.from(userProjectCompanyMap.values());\n\n                console.log(\"User-Project-Company details:\");\n                userProjectCompanyArray.forEach((entry) => {\n                    console.log(`User_Id: ${entry.User_Id}, Project: ${entry.project}, Company_Names: ${entry.company_names.join(', ')}`);\n                });\n\n                // You can also handle employee display as needed\n                const processedData = employeeData.map((employee) => ({\n                    name: employee.User_Fname + \" \" + employee.User_Lname || 'N/A',\n                    email: employee.User_Email || 'N/A',\n                    status: employee.User_Status || 'N/A',\n                }));\n\n                setEmployeesData(processedData);\n            } catch (error) {\n                setError('An error occurred while fetching employee data.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchEmployeeData();\n    }, []);\n\n    return (\n        <div className=\"Overview-container\">\n            <h1 className=\"title\">Employee Details</h1>\n            <div className=\"EmployeeTable\">\n                <h2>User Project Company Details</h2>\n                {loading && !error ? (\n                    <p>Loading...</p>\n                ) : error ? (\n                    <p>{error}</p>\n                ) : (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>User ID</th>\n                                <th>Project</th>\n                                <th>Company Name(s)</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {Array.from(userProjectCompanyMap.values()).map((entry, index) => (\n                                <tr key={index}>\n                                    <td>{entry.User_Id}</td>\n                                    <td>{entry.project}</td>\n                                    <td>{entry.company_names.join(', ')}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Overview;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMa,eAAe,GAAIC,IAAI,IAAK;IAC9B,OAAOA,IAAI,CAACC,GAAG,CAACC,IAAI,IAAI;MACpB,MAAMC,WAAW,GAAG,CAAC,CAAC;MACtB,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;QAC7C,MAAMM,UAAU,GAAGJ,GAAG,CAACK,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/CN,WAAW,CAACK,UAAU,CAAC,GAAGH,KAAK;MACnC;MACA,OAAOF,WAAW;IACtB,CAAC,CAAC;EACN,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACZ,MAAMuB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACA,MAAM,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,sBAAsB,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACpF3B,KAAK,CAAC4B,GAAG,CAAC,sCAAsC,CAAC,EACjD5B,KAAK,CAAC4B,GAAG,CAAC,iCAAiC,CAAC,EAC5C5B,KAAK,CAAC4B,GAAG,CAAC,sCAAsC,CAAC,CACpD,CAAC;QAEF,MAAMC,YAAY,GAAGN,gBAAgB,CAACX,IAAI;QAC1C,MAAMkB,aAAa,GAAGN,iBAAiB,CAACZ,IAAI;QAC5C,MAAMmB,qBAAqB,GAAGN,sBAAsB,CAACb,IAAI;;QAEzD;QACA,MAAMoB,kBAAkB,GAAGrB,eAAe,CAACoB,qBAAqB,CAAC;;QAEjE;QACA,MAAME,qBAAqB,GAAG,IAAIC,GAAG,CAAC,CAAC;QAEvCJ,aAAa,CAACK,OAAO,CAAEC,KAAK,IAAK;UAC7B,MAAM;YAAEC,OAAO;YAAEC;UAAQ,CAAC,GAAGF,KAAK;UAClC,MAAMG,OAAO,GAAGP,kBAAkB,CAACQ,IAAI,CAACD,OAAO,IAAIA,OAAO,CAACE,UAAU,KAAKH,OAAO,CAAC;UAClF,IAAIC,OAAO,EAAE;YACT,MAAMvB,GAAG,GAAG,GAAGqB,OAAO,IAAIC,OAAO,EAAE;YACnC,IAAI,CAACL,qBAAqB,CAACS,GAAG,CAAC1B,GAAG,CAAC,EAAE;cACjCiB,qBAAqB,CAACU,GAAG,CAAC3B,GAAG,EAAE;gBAC3BqB,OAAO;gBACPC,OAAO;gBACPM,aAAa,EAAE,CAACL,OAAO,CAACM,YAAY;cACxC,CAAC,CAAC;YACN,CAAC,MAAM;cACH,MAAMC,aAAa,GAAGb,qBAAqB,CAACL,GAAG,CAACZ,GAAG,CAAC;cACpD8B,aAAa,CAACF,aAAa,CAACG,IAAI,CAACR,OAAO,CAACM,YAAY,CAAC;YAC1D;UACJ;QACJ,CAAC,CAAC;;QAEF;QACA,MAAMG,uBAAuB,GAAGC,KAAK,CAACC,IAAI,CAACjB,qBAAqB,CAACkB,MAAM,CAAC,CAAC,CAAC;QAE1EC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5CL,uBAAuB,CAACb,OAAO,CAAEC,KAAK,IAAK;UACvCgB,OAAO,CAACC,GAAG,CAAC,YAAYjB,KAAK,CAACC,OAAO,cAAcD,KAAK,CAACE,OAAO,oBAAoBF,KAAK,CAACQ,aAAa,CAACU,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QACzH,CAAC,CAAC;;QAEF;QACA,MAAMC,aAAa,GAAG1B,YAAY,CAAChB,GAAG,CAAE2C,QAAQ,KAAM;UAClDC,IAAI,EAAED,QAAQ,CAACE,UAAU,GAAG,GAAG,GAAGF,QAAQ,CAACG,UAAU,IAAI,KAAK;UAC9DC,KAAK,EAAEJ,QAAQ,CAACK,UAAU,IAAI,KAAK;UACnCC,MAAM,EAAEN,QAAQ,CAACO,WAAW,IAAI;QACpC,CAAC,CAAC,CAAC;QAEHzD,gBAAgB,CAACiD,aAAa,CAAC;MACnC,CAAC,CAAC,OAAO9C,KAAK,EAAE;QACZC,QAAQ,CAAC,iDAAiD,CAAC;MAC/D,CAAC,SAAS;QACNF,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDc,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIpB,OAAA;IAAK8D,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBAC/B/D,OAAA;MAAI8D,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3CnE,OAAA;MAAK8D,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC1B/D,OAAA;QAAA+D,QAAA,EAAI;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACpC9D,OAAO,IAAI,CAACE,KAAK,gBACdP,OAAA;QAAA+D,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,GACjB5D,KAAK,gBACLP,OAAA;QAAA+D,QAAA,EAAIxD;MAAK;QAAAyD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,gBAEdnE,OAAA;QAAA+D,QAAA,gBACI/D,OAAA;UAAA+D,QAAA,eACI/D,OAAA;YAAA+D,QAAA,gBACI/D,OAAA;cAAA+D,QAAA,EAAI;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAChBnE,OAAA;cAAA+D,QAAA,EAAI;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAChBnE,OAAA;cAAA+D,QAAA,EAAI;YAAe;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eACRnE,OAAA;UAAA+D,QAAA,EACKhB,KAAK,CAACC,IAAI,CAACjB,qBAAqB,CAACkB,MAAM,CAAC,CAAC,CAAC,CAACtC,GAAG,CAAC,CAACuB,KAAK,EAAEkC,KAAK,kBACzDpE,OAAA;YAAA+D,QAAA,gBACI/D,OAAA;cAAA+D,QAAA,EAAK7B,KAAK,CAACC;YAAO;cAAA6B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACxBnE,OAAA;cAAA+D,QAAA,EAAK7B,KAAK,CAACE;YAAO;cAAA4B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACxBnE,OAAA;cAAA+D,QAAA,EAAK7B,KAAK,CAACQ,aAAa,CAACU,IAAI,CAAC,IAAI;YAAC;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,GAHpCC,KAAK;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIV,CACP;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACV;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACjE,EAAA,CA/GID,QAAQ;AAAAoE,EAAA,GAARpE,QAAQ;AAiHd,eAAeA,QAAQ;AAAC,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}