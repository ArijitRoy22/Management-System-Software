{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\n// import './Project.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Project = () => {\n  _s();\n  const [projectData, setProjectData] = useState([]);\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [pagination, setPagination] = useState({\n    pageIndex: 0,\n    pageSize: 5\n  });\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, '');\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  const fetchData = async () => {\n    try {\n      const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails')]);\n      const employeeData = employeeResponse.data;\n      const timesheetData = timesheetResponse.data;\n      const companyDetailsData = cleanFieldNames(companyDetailsResponse.data);\n\n      // Mapping employees to projects based on Timesheet and Company details\n      const projectMap = new Map();\n      timesheetData.forEach(entry => {\n        const {\n          User_Id,\n          project\n        } = entry;\n        const company = companyDetailsData.find(company => company.company_id === project);\n        if (company) {\n          if (!projectMap.has(company.company_name)) {\n            projectMap.set(company.company_name, {\n              projectName: company.company_name,\n              projectManager: company.client_name || 'Unknown',\n              employees: new Set()\n            });\n          }\n          const employee = employeeData.find(emp => emp.Emp_ID === User_Id);\n          if (employee) {\n            projectMap.get(company.company_name).employees.add(`${employee.User_Fname} ${employee.User_Lname}`);\n          }\n        }\n      });\n\n      // Preparing data for the table\n      const formattedProjectData = Array.from(projectMap.values()).map(project => ({\n        projectName: project.projectName,\n        projectManager: project.projectManager,\n        employees: [...project.employees].join(', ') || 'No employees assigned',\n        status: 'Active' // Assuming all projects are Active for now\n      }));\n      setProjectData(formattedProjectData);\n      setEmployeesData(employeeData);\n    } catch (error) {\n      setError('An error occurred while fetching project data.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 2000); // Fetch data every 2 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  // Define columns for Material React Table\n  const columns = useMemo(() => [{\n    accessorKey: 'projectName',\n    header: 'Project Name',\n    size: 200\n  }, {\n    accessorKey: 'projectManager',\n    header: 'Project Manager',\n    size: 200\n  }, {\n    accessorKey: 'employees',\n    header: 'Employees',\n    size: 400,\n    Cell: ({\n      cell\n    }) => /*#__PURE__*/_jsxDEV(\"select\", {\n      children: cell.getValue().split(', ').map((employee, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: employee,\n        children: employee\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this)\n  }, {\n    accessorKey: 'status',\n    header: 'Status',\n    size: 150\n  }], []);\n  const table = useMaterialReactTable({\n    columns,\n    data: projectData,\n    state: {\n      isLoading: loading,\n      pagination\n    },\n    onPaginationChange: setPagination,\n    enableFullScreenToggle: false,\n    globalFilterFn: 'contains'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Project-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Project Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ProjectTable\",\n      children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(MaterialReactTable, {\n        table: table\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n};\n_s(Project, \"aOd469BfCfmCvOVJgcewHXP0y6o=\", false, function () {\n  return [useMaterialReactTable];\n});\n_c = Project;\nexport default Project;\nvar _c;\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","MaterialReactTable","useMaterialReactTable","jsxDEV","_jsxDEV","Project","_s","projectData","setProjectData","employeesData","setEmployeesData","loading","setLoading","error","setError","pagination","setPagination","pageIndex","pageSize","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","Promise","all","get","employeeData","timesheetData","companyDetailsData","projectMap","Map","forEach","entry","User_Id","project","company","find","company_id","has","company_name","set","projectName","projectManager","client_name","employees","Set","employee","emp","Emp_ID","add","User_Fname","User_Lname","formattedProjectData","Array","from","values","join","status","interval","setInterval","clearInterval","columns","accessorKey","header","size","Cell","cell","children","getValue","split","index","fileName","_jsxFileName","lineNumber","columnNumber","table","state","isLoading","onPaginationChange","enableFullScreenToggle","globalFilterFn","className","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport {\n    MaterialReactTable,\n    useMaterialReactTable,\n} from 'material-react-table';\n// import './Project.css';\n\nconst Project = () => {\n    const [projectData, setProjectData] = useState([]);\n    const [employeesData, setEmployeesData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [pagination, setPagination] = useState({\n        pageIndex: 0,\n        pageSize: 5,\n    });\n\n    const cleanFieldNames = (data) => {\n        return data.map((item) => {\n            const cleanedItem = {};\n            for (const [key, value] of Object.entries(item)) {\n                const cleanedKey = key.replace(/^\\uFEFF/, '');\n                cleanedItem[cleanedKey] = value;\n            }\n            return cleanedItem;\n        });\n    };\n\n    const fetchData = async () => {\n        try {\n            const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([\n                axios.get('http://localhost:5001/Employee_Data1'),\n                axios.get('http://localhost:5001/timesheet'),\n                axios.get('http://localhost:5001/CompanyDetails'),\n            ]);\n\n            const employeeData = employeeResponse.data;\n            const timesheetData = timesheetResponse.data;\n            const companyDetailsData = cleanFieldNames(companyDetailsResponse.data);\n\n            // Mapping employees to projects based on Timesheet and Company details\n            const projectMap = new Map();\n            timesheetData.forEach((entry) => {\n                const { User_Id, project } = entry;\n                const company = companyDetailsData.find(\n                    (company) => company.company_id === project\n                );\n\n                if (company) {\n                    if (!projectMap.has(company.company_name)) {\n                        projectMap.set(company.company_name, {\n                            projectName: company.company_name,\n                            projectManager: company.client_name || 'Unknown',\n                            employees: new Set(),\n                        });\n                    }\n                    const employee = employeeData.find((emp) => emp.Emp_ID === User_Id);\n                    if (employee) {\n                        projectMap\n                            .get(company.company_name)\n                            .employees.add(`${employee.User_Fname} ${employee.User_Lname}`);\n                    }\n                }\n            });\n\n            // Preparing data for the table\n            const formattedProjectData = Array.from(projectMap.values()).map((project) => ({\n                projectName: project.projectName,\n                projectManager: project.projectManager,\n                employees: [...project.employees].join(', ') || 'No employees assigned',\n                status: 'Active', // Assuming all projects are Active for now\n            }));\n\n            setProjectData(formattedProjectData);\n            setEmployeesData(employeeData);\n        } catch (error) {\n            setError('An error occurred while fetching project data.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n        const interval = setInterval(fetchData, 2000); // Fetch data every 2 seconds\n        return () => clearInterval(interval);\n    }, []);\n\n    // Define columns for Material React Table\n    const columns = useMemo(() => [\n        {\n            accessorKey: 'projectName',\n            header: 'Project Name',\n            size: 200,\n        },\n        {\n            accessorKey: 'projectManager',\n            header: 'Project Manager',\n            size: 200,\n        },\n        {\n            accessorKey: 'employees',\n            header: 'Employees',\n            size: 400,\n            Cell: ({ cell }) => (\n                <select>\n                    {cell.getValue().split(', ').map((employee, index) => (\n                        <option key={index} value={employee}>\n                            {employee}\n                        </option>\n                    ))}\n                </select>\n            ),\n        },\n        {\n            accessorKey: 'status',\n            header: 'Status',\n            size: 150,\n        },\n    ], []);\n\n    const table = useMaterialReactTable({\n        columns,\n        data: projectData,\n        state: { isLoading: loading, pagination },\n        onPaginationChange: setPagination,\n        enableFullScreenToggle: false,\n        globalFilterFn: 'contains',\n    });\n\n    return (\n        <div className=\"Project-container\">\n            <h1 className=\"title\">Project Overview</h1>\n            <div className=\"ProjectTable\">\n                {error ? (\n                    <p className=\"error-text\">{error}</p>\n                ) : (\n                    <MaterialReactTable table={table} />\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Project;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}