{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport GradientPieChart from './GradientPieChart';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalEmployees, setTotalEmployees] = useState(0);\n  const [totalHours, setTotalHours] = useState({\n    hours: 0,\n    mins: 0\n  });\n  const [statusCounts, setStatusCounts] = useState({});\n  const [projectCounts, setProjectCounts] = useState({});\n  const [pagination, setPagination] = useState({\n    pageIndex: 0,\n    pageSize: 5 // Set the default page size\n  });\n  const convertToHoursAndMinutes = minutes => {\n    const hours = Math.floor(minutes / 60);\n    const mins = Math.round(minutes % 60);\n    return {\n      hours,\n      mins\n    };\n  };\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, '');\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  const calculateTotalHours = timesheetData => {\n    const totalMinutes = {\n      total: 0\n    };\n    timesheetData.forEach(entry => {\n      const [hours, minutes, seconds] = entry.hours.split(':').map(Number);\n      const totalMinutesForEntry = hours * 60 + minutes + seconds / 60;\n      totalMinutes.total += totalMinutesForEntry;\n      if (!totalMinutes[entry.User_Id]) {\n        totalMinutes[entry.User_Id] = 0;\n      }\n      totalMinutes[entry.User_Id] += totalMinutesForEntry;\n    });\n    const totalHours = convertToHoursAndMinutes(totalMinutes.total);\n    setTotalHours(totalHours);\n    return totalMinutes;\n  };\n  const calculateProjectCounts = userProjectTaskMap => {\n    const projectCounts = {};\n    userProjectTaskMap.forEach(({\n      projects\n    }) => {\n      projects.forEach(project => {\n        if (projectCounts[project]) {\n          projectCounts[project] += 1; // Increment count for each project\n        } else {\n          projectCounts[project] = 1; // Initialize count if project is seen for the first time\n        }\n      });\n    });\n    return projectCounts;\n  };\n  const fetchData = async () => {\n    try {\n      const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails'), axios.get('http://localhost:5001/Modules_Tasks')]);\n      const employeeData = employeeResponse.data;\n      const timesheetData = timesheetResponse.data;\n      const rawCompanyDetailsData = companyDetailsResponse.data;\n      const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n      const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n      const userProjectTaskMap = new Map();\n      timesheetData.forEach(entry => {\n        const {\n          User_Id,\n          project,\n          task\n        } = entry;\n        const company = companyDetailsData.find(company => company.company_id === project);\n        const taskDetails = moduleTaskData.find(module => module.m_slno === task);\n        if (company || taskDetails) {\n          if (!userProjectTaskMap.has(User_Id)) {\n            userProjectTaskMap.set(User_Id, {\n              projects: new Set(),\n              tasks: new Set()\n            });\n          }\n          if (company) {\n            userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n          }\n          if (taskDetails) {\n            userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n          }\n        }\n      });\n      const statusCounts = timesheetData.reduce((acc, item) => {\n        acc[item.Status] = (acc[item.Status] || 0) + 1;\n        return acc;\n      }, {});\n      setStatusCounts(statusCounts);\n      const projectCounts = calculateProjectCounts(userProjectTaskMap);\n      setProjectCounts(projectCounts);\n      const processedData = employeeData.map(employee => {\n        var _userProjectTaskMap$g, _userProjectTaskMap$g2;\n        const projectSet = ((_userProjectTaskMap$g = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g === void 0 ? void 0 : _userProjectTaskMap$g.projects) || new Set();\n        const taskSet = ((_userProjectTaskMap$g2 = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g2 === void 0 ? void 0 : _userProjectTaskMap$g2.tasks) || new Set();\n        const formattedProjects = [...projectSet].length > 0 ? [...projectSet].join(', ') : 'No project assigned';\n        const formattedTasks = [...taskSet].length > 0 ? [...taskSet].join(', ') : 'No task assigned';\n        return {\n          id: employee.Emp_ID,\n          name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n          email: employee.User_Email || 'N/A',\n          status: employee.User_Status || 'N/A',\n          companyName: formattedProjects,\n          taskName: formattedTasks\n        };\n      });\n      const totalMinutes = calculateTotalHours(timesheetData);\n      const processedDataWithHours = processedData.map(employee => ({\n        ...employee,\n        totalHours: totalMinutes[employee.id] ? convertToHoursAndMinutes(totalMinutes[employee.id]) : {\n          hours: 0,\n          mins: 0\n        }\n      }));\n\n      // Only update state if data has changed\n      if (JSON.stringify(processedDataWithHours) !== JSON.stringify(employeesData)) {\n        setEmployeesData(processedDataWithHours);\n        setTotalEmployees(processedDataWithHours.length);\n      }\n    } catch (error) {\n      setError('An error occurred while fetching employee data.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 2000); // You can adjust the interval as needed\n    return () => clearInterval(interval);\n  }, [employeesData]); // Add employeesData to dependency array\n\n  // Define columns for Material React Table\n  const columns = useMemo(() => [{\n    accessorKey: 'name',\n    header: 'Employee Name',\n    size: 150\n  }, {\n    accessorKey: 'email',\n    header: 'Email',\n    size: 200\n  }, {\n    accessorKey: 'status',\n    header: 'Employee Status',\n    size: 150\n  }, {\n    accessorKey: 'companyName',\n    header: 'Project',\n    size: 200\n  }, {\n    accessorKey: 'taskName',\n    header: 'Task',\n    size: 200\n  }, {\n    accessorKey: 'totalHours',\n    header: 'Time',\n    size: 150,\n    Cell: ({\n      cell\n    }) => `${cell.getValue().hours} hrs ${cell.getValue().mins} mins` // Custom rendering for total hours\n  }], []);\n  const table = useMaterialReactTable({\n    columns,\n    data: employeesData,\n    state: {\n      isLoading: loading,\n      pagination\n    },\n    onPaginationChange: setPagination,\n    // Update pagination state on change\n    enableFullScreenToggle: false // Disable full-screen toggle option\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Time Sheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counts-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"EmployeeCount\",\n        children: [\"Total Number of Employees: \", totalEmployees]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"TimeCount\",\n        children: [\"Total Time: \", totalHours.hours, \" hrs \", totalHours.mins, \" mins\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(MaterialReactTable, {\n        table: table\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Status Breakdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GradientPieChart, {\n            data: Object.entries(statusCounts).map(([key, value]) => ({\n              name: key,\n              value\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Status Breakdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GradientPieChart, {\n            data: Object.entries(projectCounts).map(([key, value]) => ({\n              name: key,\n              value\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n};\n_s(Overview, \"gbYvkRUdfMoIZDhtRLF3bTv8JAM=\", false, function () {\n  return [useMaterialReactTable];\n});\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","MaterialReactTable","useMaterialReactTable","GradientPieChart","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","totalEmployees","setTotalEmployees","totalHours","setTotalHours","hours","mins","statusCounts","setStatusCounts","projectCounts","setProjectCounts","pagination","setPagination","pageIndex","pageSize","convertToHoursAndMinutes","minutes","Math","floor","round","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","calculateTotalHours","timesheetData","totalMinutes","total","forEach","entry","seconds","split","Number","totalMinutesForEntry","User_Id","calculateProjectCounts","userProjectTaskMap","projects","project","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","moduleTaskResponse","Promise","all","get","employeeData","rawCompanyDetailsData","moduleTaskData","companyDetailsData","Map","task","company","find","company_id","taskDetails","module","m_slno","has","set","Set","tasks","add","company_name","mod_name","reduce","acc","Status","processedData","employee","_userProjectTaskMap$g","_userProjectTaskMap$g2","projectSet","Emp_ID","taskSet","formattedProjects","length","join","formattedTasks","id","name","User_Fname","User_Lname","email","User_Email","status","User_Status","companyName","taskName","processedDataWithHours","JSON","stringify","interval","setInterval","clearInterval","columns","accessorKey","header","size","Cell","cell","getValue","table","state","isLoading","onPaginationChange","enableFullScreenToggle","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport {\n  MaterialReactTable,\n  useMaterialReactTable,\n} from 'material-react-table';\nimport GradientPieChart from './GradientPieChart';\nimport './Overview.css';\n\nconst Overview = () => {\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalEmployees, setTotalEmployees] = useState(0);\n  const [totalHours, setTotalHours] = useState({ hours: 0, mins: 0 });\n  const [statusCounts, setStatusCounts] = useState({});\n  const [projectCounts, setProjectCounts] = useState({});\n  const [pagination, setPagination] = useState({\n    pageIndex: 0,\n    pageSize: 5, // Set the default page size\n  });\n\n  const convertToHoursAndMinutes = (minutes) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = Math.round(minutes % 60);\n    return { hours, mins };\n  };\n\n  const cleanFieldNames = (data) => {\n    return data.map((item) => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, '');\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n\n  const calculateTotalHours = (timesheetData) => {\n    const totalMinutes = { total: 0 };\n    timesheetData.forEach((entry) => {\n      const [hours, minutes, seconds] = entry.hours.split(':').map(Number);\n      const totalMinutesForEntry = hours * 60 + minutes + seconds / 60;\n      totalMinutes.total += totalMinutesForEntry;\n      if (!totalMinutes[entry.User_Id]) {\n        totalMinutes[entry.User_Id] = 0;\n      }\n      totalMinutes[entry.User_Id] += totalMinutesForEntry;\n    });\n\n    const totalHours = convertToHoursAndMinutes(totalMinutes.total);\n    setTotalHours(totalHours);\n    return totalMinutes;\n  };\n  \n  const calculateProjectCounts = (userProjectTaskMap) => {\n    const projectCounts = {};\n  \n    userProjectTaskMap.forEach(({ projects }) => {\n      projects.forEach((project) => {\n        if (projectCounts[project]) {\n          projectCounts[project] += 1; // Increment count for each project\n        } else {\n          projectCounts[project] = 1; // Initialize count if project is seen for the first time\n        }\n      });\n    });\n  \n    return projectCounts;\n  };\n\n  const fetchData = async () => {\n    try {\n      const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([\n        axios.get('http://localhost:5001/Employee_Data1'),\n        axios.get('http://localhost:5001/timesheet'),\n        axios.get('http://localhost:5001/CompanyDetails'),\n        axios.get('http://localhost:5001/Modules_Tasks'),\n      ]);\n\n      const employeeData = employeeResponse.data;\n      const timesheetData = timesheetResponse.data;\n      const rawCompanyDetailsData = companyDetailsResponse.data;\n      const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n      const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n      const userProjectTaskMap = new Map();\n      timesheetData.forEach((entry) => {\n        const { User_Id, project, task } = entry;\n        const company = companyDetailsData.find(\n          (company) => company.company_id === project\n        );\n        const taskDetails = moduleTaskData.find(\n          (module) => module.m_slno === task\n        );\n\n        if (company || taskDetails) {\n          if (!userProjectTaskMap.has(User_Id)) {\n            userProjectTaskMap.set(User_Id, { projects: new Set(), tasks: new Set() });\n          }\n\n          if (company) {\n            userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n          }\n\n          if (taskDetails) {\n            userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n          }\n        }\n      });\n\n      const statusCounts = timesheetData.reduce((acc, item) => {\n        acc[item.Status] = (acc[item.Status] || 0) + 1;\n        return acc;\n      }, {});\n      setStatusCounts(statusCounts);\n\n\n      const projectCounts = calculateProjectCounts(userProjectTaskMap);\n      setProjectCounts(projectCounts);\n\n      const processedData = employeeData.map((employee) => {\n        const projectSet = userProjectTaskMap.get(employee.Emp_ID)?.projects || new Set();\n        const taskSet = userProjectTaskMap.get(employee.Emp_ID)?.tasks || new Set();\n\n        const formattedProjects = [...projectSet].length > 0\n          ? [...projectSet].join(', ')\n          : 'No project assigned';\n\n        const formattedTasks = [...taskSet].length > 0\n          ? [...taskSet].join(', ')\n          : 'No task assigned';\n\n        return {\n          id: employee.Emp_ID,\n          name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n          email: employee.User_Email || 'N/A',\n          status: employee.User_Status || 'N/A',\n          companyName: formattedProjects,\n          taskName: formattedTasks,\n        };\n      });\n\n      const totalMinutes = calculateTotalHours(timesheetData);\n      const processedDataWithHours = processedData.map((employee) => ({\n        ...employee,\n        totalHours: totalMinutes[employee.id] ? convertToHoursAndMinutes(totalMinutes[employee.id]) : { hours: 0, mins: 0 },\n      }));\n\n      // Only update state if data has changed\n      if (JSON.stringify(processedDataWithHours) !== JSON.stringify(employeesData)) {\n        setEmployeesData(processedDataWithHours);\n        setTotalEmployees(processedDataWithHours.length);\n      }\n      \n    } catch (error) {\n      setError('An error occurred while fetching employee data.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 2000); // You can adjust the interval as needed\n    return () => clearInterval(interval);\n  }, [employeesData]); // Add employeesData to dependency array\n\n  // Define columns for Material React Table\n  const columns = useMemo(() => [\n    {\n      accessorKey: 'name',\n      header: 'Employee Name',\n      size: 150,\n    },\n    {\n      accessorKey: 'email',\n      header: 'Email',\n      size: 200,\n    },\n    {\n      accessorKey: 'status',\n      header: 'Employee Status',\n      size: 150,\n    },\n    {\n      accessorKey: 'companyName',\n      header: 'Project',\n      size: 200,\n    },\n    {\n      accessorKey: 'taskName',\n      header: 'Task',\n      size: 200,\n    },\n    {\n      accessorKey: 'totalHours',\n      header: 'Time',\n      size: 150,\n      Cell: ({ cell }) => `${cell.getValue().hours} hrs ${cell.getValue().mins} mins`, // Custom rendering for total hours\n    },\n  ], []);\n\n  const table = useMaterialReactTable({\n    columns,\n    data: employeesData,\n    state: { isLoading: loading, pagination },\n    onPaginationChange: setPagination, // Update pagination state on change\n    enableFullScreenToggle: false, // Disable full-screen toggle option\n  });\n\n  return (\n    <div className=\"Overview-container\">\n      <h1 className=\"title\">Employee Time Sheet</h1>\n      <div className='counts-container'>\n        <p className='EmployeeCount'>Total Number of Employees: {totalEmployees}</p>\n        <p className='TimeCount'>Total Time: {totalHours.hours} hrs {totalHours.mins} mins</p>\n      </div>\n      <div className=\"EmployeeTable\">\n        {error ? (\n          <p className=\"error-text\">{error}</p>\n        ) : (\n          <MaterialReactTable table={table} />\n        )}\n      </div>\n      <div className='final-container'>\n        <div className='chart-container'>\n          <div className='chart1'>\n            <h2>Status Breakdown</h2>\n            <GradientPieChart\n              data={Object.entries(statusCounts).map(([key, value]) => ({ name: key, value }))}\n            />\n          </div>\n        </div>\n        <div className='chart-container'>\n          <div className='chart2'>\n            <h2>Status Breakdown</h2>\n            <GradientPieChart\n              data={Object.entries(projectCounts).map(([key, value]) => ({ name: key, value }))}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}