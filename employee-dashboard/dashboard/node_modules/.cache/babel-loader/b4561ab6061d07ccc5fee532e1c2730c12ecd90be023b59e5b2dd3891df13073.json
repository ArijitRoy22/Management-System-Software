{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport BarChart from './BarChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Project = () => {\n  _s();\n  const [projectData, setProjectData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [statusCounts, setStatusCounts] = useState({});\n  const [pagination, setPagination] = useState({\n    pageIndex: 0,\n    pageSize: 5\n  });\n\n  // Function to clean BOM (Byte Order Mark) from field names\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, '');\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n\n  // Fetch project data from server\n  const fetchData = async () => {\n    try {\n      const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails')]);\n      const employeeData = employeeResponse.data;\n      const timesheetData = timesheetResponse.data;\n      const companyDetailsData = cleanFieldNames(companyDetailsResponse.data);\n      const userProjectMap = new Map();\n      timesheetData.forEach(entry => {\n        const {\n          User_Id,\n          project\n        } = entry;\n        const company = companyDetailsData.find(company => company.company_id === project);\n        if (company) {\n          if (!userProjectMap.has(company.company_id)) {\n            userProjectMap.set(company.company_id, {\n              projectName: company.company_name,\n              employees: new Set(),\n              status: company.status\n            });\n          }\n          const employee = employeeData.find(emp => emp.Emp_ID === User_Id);\n          if (employee) {\n            userProjectMap.get(company.company_id).employees.add(`${employee.User_Fname} ${employee.User_Lname}`);\n          }\n        }\n      });\n      const processedData = Array.from(userProjectMap.values()).map((project, index) => ({\n        id: index + 1,\n        projectName: project.projectName,\n        projectManager: 'N/A',\n        // Add logic to assign the project manager if needed\n        employees: Array.from(project.employees),\n        status: project.status\n      }));\n\n      // Count statuses for the bar chart\n      const statusCounts = processedData.reduce((acc, project) => {\n        acc[project.status] = (acc[project.status] || 0) + 1;\n        return acc;\n      }, {});\n      setStatusCounts(statusCounts);\n\n      // Update data only if it has changed\n      if (JSON.stringify(processedData) !== JSON.stringify(projectData)) {\n        setProjectData(processedData);\n      }\n    } catch (error) {\n      setError('An error occurred while fetching project data.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData(); // Initial fetch\n    const interval = setInterval(fetchData, 2000); // Fetch data every 2 seconds\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, [projectData]);\n\n  // Define columns for the table\n  const columns = useMemo(() => [{\n    accessorKey: 'projectName',\n    header: 'Project Name',\n    size: 200\n  }, {\n    accessorKey: 'projectManager',\n    header: 'Project Manager',\n    size: 200\n  }, {\n    accessorKey: 'employees',\n    header: 'Employees',\n    size: 300,\n    Cell: ({\n      cell\n    }) => /*#__PURE__*/_jsxDEV(\"select\", {\n      multiple: true,\n      children: cell.getValue().map((employee, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        children: employee\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }, this)\n  }, {\n    accessorKey: 'status',\n    header: 'Status',\n    size: 150\n  }], []);\n  const table = useMaterialReactTable({\n    columns,\n    data: projectData,\n    state: {\n      isLoading: loading,\n      pagination\n    },\n    onPaginationChange: setPagination,\n    enableFullScreenToggle: false,\n    globalFilterFn: 'contains'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Project-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ProjectTable\",\n      children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(MaterialReactTable, {\n        table: table\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Project Status Breakdown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n        data: Object.entries(statusCounts).map(([key, value]) => ({\n          name: key,\n          value\n        })),\n        text: \"Number of Projects by Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n};\n_s(Project, \"iWtk0QASl8u2nShiyRP7mp2l3LQ=\", false, function () {\n  return [useMaterialReactTable];\n});\n_c = Project;\nexport default Project;\nvar _c;\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","MaterialReactTable","useMaterialReactTable","BarChart","jsxDEV","_jsxDEV","Project","_s","projectData","setProjectData","loading","setLoading","error","setError","statusCounts","setStatusCounts","pagination","setPagination","pageIndex","pageSize","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","Promise","all","get","employeeData","timesheetData","companyDetailsData","userProjectMap","Map","forEach","entry","User_Id","project","company","find","company_id","has","set","projectName","company_name","employees","Set","status","employee","emp","Emp_ID","add","User_Fname","User_Lname","processedData","Array","from","values","index","id","projectManager","reduce","acc","JSON","stringify","interval","setInterval","clearInterval","columns","accessorKey","header","size","Cell","cell","multiple","children","getValue","fileName","_jsxFileName","lineNumber","columnNumber","table","state","isLoading","onPaginationChange","enableFullScreenToggle","globalFilterFn","className","name","text","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport {\n    MaterialReactTable,\n    useMaterialReactTable,\n} from 'material-react-table';\nimport BarChart from './BarChart';\n\nconst Project = () => {\n    const [projectData, setProjectData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [statusCounts, setStatusCounts] = useState({});\n    const [pagination, setPagination] = useState({\n        pageIndex: 0,\n        pageSize: 5,\n    });\n\n    // Function to clean BOM (Byte Order Mark) from field names\n    const cleanFieldNames = (data) => {\n        return data.map((item) => {\n            const cleanedItem = {};\n            for (const [key, value] of Object.entries(item)) {\n                const cleanedKey = key.replace(/^\\uFEFF/, '');\n                cleanedItem[cleanedKey] = value;\n            }\n            return cleanedItem;\n        });\n    };\n\n    // Fetch project data from server\n    const fetchData = async () => {\n        try {\n            const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([\n                axios.get('http://localhost:5001/Employee_Data1'),\n                axios.get('http://localhost:5001/timesheet'),\n                axios.get('http://localhost:5001/CompanyDetails'),\n            ]);\n\n            const employeeData = employeeResponse.data;\n            const timesheetData = timesheetResponse.data;\n            const companyDetailsData = cleanFieldNames(companyDetailsResponse.data);\n\n            const userProjectMap = new Map();\n            timesheetData.forEach((entry) => {\n                const { User_Id, project } = entry;\n                const company = companyDetailsData.find((company) => company.company_id === project);\n\n                if (company) {\n                    if (!userProjectMap.has(company.company_id)) {\n                        userProjectMap.set(company.company_id, { projectName: company.company_name, employees: new Set(), status: company.status });\n                    }\n                    const employee = employeeData.find((emp) => emp.Emp_ID === User_Id);\n                    if (employee) {\n                        userProjectMap.get(company.company_id).employees.add(`${employee.User_Fname} ${employee.User_Lname}`);\n                    }\n                }\n            });\n\n            const processedData = Array.from(userProjectMap.values()).map((project, index) => ({\n                id: index + 1,\n                projectName: project.projectName,\n                projectManager: 'N/A', // Add logic to assign the project manager if needed\n                employees: Array.from(project.employees),\n                status: project.status,\n            }));\n\n            // Count statuses for the bar chart\n            const statusCounts = processedData.reduce((acc, project) => {\n                acc[project.status] = (acc[project.status] || 0) + 1;\n                return acc;\n            }, {});\n            setStatusCounts(statusCounts);\n\n            // Update data only if it has changed\n            if (JSON.stringify(processedData) !== JSON.stringify(projectData)) {\n                setProjectData(processedData);\n            }\n\n        } catch (error) {\n            setError('An error occurred while fetching project data.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData(); // Initial fetch\n        const interval = setInterval(fetchData, 2000); // Fetch data every 2 seconds\n        return () => clearInterval(interval); // Clean up the interval on component unmount\n    }, [projectData]);\n\n    // Define columns for the table\n    const columns = useMemo(() => [\n        {\n            accessorKey: 'projectName',\n            header: 'Project Name',\n            size: 200,\n        },\n        {\n            accessorKey: 'projectManager',\n            header: 'Project Manager',\n            size: 200,\n        },\n        {\n            accessorKey: 'employees',\n            header: 'Employees',\n            size: 300,\n            Cell: ({ cell }) => (\n                <select multiple>\n                    {cell.getValue().map((employee, index) => (\n                        <option key={index}>{employee}</option>\n                    ))}\n                </select>\n            ),\n        },\n        {\n            accessorKey: 'status',\n            header: 'Status',\n            size: 150,\n        },\n    ], []);\n\n    const table = useMaterialReactTable({\n        columns,\n        data: projectData,\n        state: { isLoading: loading, pagination },\n        onPaginationChange: setPagination,\n        enableFullScreenToggle: false,\n        globalFilterFn: 'contains',\n    });\n\n    return (\n        <div className=\"Project-container\">\n            <h1 className=\"title\">Projects</h1>\n            <div className=\"ProjectTable\">\n                {error ? (\n                    <p className=\"error-text\">{error}</p>\n                ) : (\n                    <MaterialReactTable table={table} />\n                )}\n            </div>\n            <div className=\"chart-container\">\n                <h2>Project Status Breakdown</h2>\n                <BarChart\n                    data={Object.entries(statusCounts).map(([key, value]) => ({ name: key, value }))}\n                    text='Number of Projects by Status'\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default Project;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}