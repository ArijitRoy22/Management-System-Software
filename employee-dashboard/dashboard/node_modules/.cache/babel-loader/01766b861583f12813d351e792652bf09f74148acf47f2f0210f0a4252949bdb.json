{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  useEffect(() => {\n    const fetchEmployeeData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n\n        // Clean the company details data\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n        // Process unique user_id and project pairs\n        const userProjectCompanyMap = new Map();\n        timesheetData.forEach(entry => {\n          const {\n            User_Id,\n            project\n          } = entry;\n          const company = companyDetailsData.find(company => company.company_id === project);\n          if (company) {\n            if (!userProjectCompanyMap.has(User_Id)) {\n              userProjectCompanyMap.set(User_Id, new Set());\n            }\n            userProjectCompanyMap.get(User_Id).add(company.company_name);\n          }\n        });\n\n        // Process employee data for display in table\n        const processedData = employeeData.map(employee => {\n          const projectSet = userProjectCompanyMap.get(employee.Emp_ID) || new Set();\n          const projectNamesArray = [...projectSet];\n\n          // Create formatted project names with two per line and commas handled correctly\n          const formattedProjects = projectNamesArray.length > 0 ? projectNamesArray.reduce((acc, project, index) => {\n            if (index > 0 && index % 2 === 0) {\n              acc.push( /*#__PURE__*/_jsxDEV(\"br\", {}, `br-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 42\n              }, this)); // Add a line break after every two projects\n            }\n            acc.push( /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"project-cell\",\n              children: [project, index !== projectNamesArray.length - 1 ? ', ' : '']\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 33\n            }, this));\n            return acc;\n          }, []) : 'No project assigned';\n          return {\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            companyName: formattedProjects\n          };\n        });\n        setEmployeesData(processedData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchEmployeeData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Employees Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), loading && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Employee Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Project\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: employeesData.map((employee, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.companyName.split(', ').map((project, index, arr) => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"project-cell\",\n                children: [project, index < arr.length - 1 && ',']\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n_s(Overview, \"55THOB/m7eZcGNdMGjyDf1FNpOg=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","fetchEmployeeData","employeeResponse","timesheetResponse","companyDetailsResponse","Promise","all","get","employeeData","timesheetData","rawCompanyDetailsData","companyDetailsData","userProjectCompanyMap","Map","forEach","entry","User_Id","project","company","find","company_id","has","set","Set","add","company_name","processedData","employee","projectSet","Emp_ID","projectNamesArray","formattedProjects","length","reduce","acc","index","push","fileName","_jsxFileName","lineNumber","columnNumber","className","children","name","User_Fname","User_Lname","email","User_Email","status","User_Status","companyName","split","arr","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\n\nconst Overview = () => {\n    const [employeesData, setEmployeesData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const cleanFieldNames = (data) => {\n        return data.map((item) => {\n            const cleanedItem = {};\n            for (const [key, value] of Object.entries(item)) {\n                const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n                cleanedItem[cleanedKey] = value;\n            }\n            return cleanedItem;\n        });\n    };\n\n    useEffect(() => {\n        const fetchEmployeeData = async () => {\n            try {\n                const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([\n                    axios.get('http://localhost:5001/Employee_Data1'),\n                    axios.get('http://localhost:5001/timesheet'),\n                    axios.get('http://localhost:5001/CompanyDetails'),\n                ]);\n\n                const employeeData = employeeResponse.data;\n                const timesheetData = timesheetResponse.data;\n                const rawCompanyDetailsData = companyDetailsResponse.data;\n\n                // Clean the company details data\n                const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n                // Process unique user_id and project pairs\n                const userProjectCompanyMap = new Map();\n                timesheetData.forEach((entry) => {\n                    const { User_Id, project } = entry;\n                    const company = companyDetailsData.find(\n                        (company) => company.company_id === project\n                    );\n\n                    if (company) {\n                        if (!userProjectCompanyMap.has(User_Id)) {\n                            userProjectCompanyMap.set(User_Id, new Set());\n                        }\n                        userProjectCompanyMap.get(User_Id).add(company.company_name);\n                    }\n                });\n\n                // Process employee data for display in table\n                const processedData = employeeData.map((employee) => {\n                    const projectSet = userProjectCompanyMap.get(employee.Emp_ID) || new Set();\n                    const projectNamesArray = [...projectSet];\n\n                    // Create formatted project names with two per line and commas handled correctly\n                    const formattedProjects = projectNamesArray.length > 0\n                        ? projectNamesArray.reduce((acc, project, index) => {\n                            if (index > 0 && index % 2 === 0) {\n                                acc.push(<br key={`br-${index}`} />); // Add a line break after every two projects\n                            }\n                            acc.push(\n                                <span key={index} className=\"project-cell\">\n                                    {project}\n                                    {index !== projectNamesArray.length - 1 ? ', ' : ''}\n                                </span>\n                            );\n                            return acc;\n                        }, [])\n                        : 'No project assigned';\n\n                    return {\n                        name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n                        email: employee.User_Email || 'N/A',\n                        status: employee.User_Status || 'N/A',\n                        companyName: formattedProjects,\n                    };\n                });\n\n                setEmployeesData(processedData);\n            } catch (error) {\n                setError('An error occurred while fetching employee data.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchEmployeeData();\n    }, []);\n\n    return (\n        <div className=\"Overview-container\">\n            <h1 className=\"title\">Employee Details</h1>\n            <div className=\"EmployeeTable\">\n                <h2>Employees Details</h2>\n                {loading && !error ? (\n                    <p>Loading...</p>\n                ) : error ? (\n                    <p>{error}</p>\n                ) : (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Employee Name</th>\n                                <th>Email</th>\n                                <th>Status</th>\n                                <th>Project</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {employeesData.map((employee, index) => (\n                                <tr key={index}>\n                                    <td>{employee.name}</td>\n                                    <td>{employee.email}</td>\n                                    <td>{employee.status}</td>\n                                    <td>\n                                        {employee.companyName.split(', ').map((project, index, arr) => (\n                                            <span key={index} className=\"project-cell\">\n                                                {project}\n                                                {index < arr.length - 1 && ','}\n                                            </span>\n                                        ))}\n                                    </td>\n\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}