{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport BarChart from './BarChart';\n// import './Project.css'; // Add a new CSS file for the project page\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Project = () => {\n  _s();\n  const [projectData, setProjectData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [projectDistribution, setProjectDistribution] = useState({});\n  const fetchProjectData = async () => {\n    try {\n      // Fetch project data from the API\n      const projectResponse = await axios.get('http://localhost:5001/Project_Data');\n      const projectData = projectResponse.data;\n      const projectDistributionCounts = projectData.reduce((acc, project) => {\n        acc[project.project_name] = (acc[project.project_name] || 0) + 1;\n        return acc;\n      }, {});\n      setProjectDistribution(projectDistributionCounts);\n\n      // Process and clean project data\n      const cleanedProjectData = projectData.map(project => ({\n        projectId: project.project_id,\n        projectName: project.project_name,\n        projectManager: project.project_manager || 'N/A',\n        employees: project.employees || [],\n        status: project.status || 'N/A'\n      }));\n      setProjectData(cleanedProjectData);\n    } catch (error) {\n      setError('An error occurred while fetching project data.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchProjectData();\n  }, []);\n\n  // Define columns for the Project Table\n  const columns = useMemo(() => [{\n    accessorKey: 'projectId',\n    header: 'Project ID',\n    size: 150\n  }, {\n    accessorKey: 'projectName',\n    header: 'Project Name',\n    size: 200\n  }, {\n    accessorKey: 'projectManager',\n    header: 'Project Manager',\n    size: 200\n  }, {\n    accessorKey: 'employees',\n    header: 'Employees',\n    size: 200,\n    Cell: ({\n      cell\n    }) => /*#__PURE__*/_jsxDEV(\"select\", {\n      children: cell.getValue().map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n        children: employee\n      }, employee, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this)\n  }, {\n    accessorKey: 'status',\n    header: 'Status',\n    size: 150\n  }], []);\n  const table = useMaterialReactTable({\n    columns,\n    data: projectData,\n    state: {\n      isLoading: loading\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Project-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Project Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ProjectTable\",\n      children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(MaterialReactTable, {\n        table: table\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container1\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Project Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n            data: Object.entries(projectDistribution).map(([key, value]) => ({\n              name: key,\n              value\n            })),\n            title: \"Project Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(Project, \"ZtU9C27zqhBtGc/DZhC7FBqNp3E=\", false, function () {\n  return [useMaterialReactTable];\n});\n_c = Project;\nexport default Project;\nvar _c;\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","MaterialReactTable","useMaterialReactTable","BarChart","jsxDEV","_jsxDEV","Project","_s","projectData","setProjectData","loading","setLoading","error","setError","projectDistribution","setProjectDistribution","fetchProjectData","projectResponse","get","data","projectDistributionCounts","reduce","acc","project","project_name","cleanedProjectData","map","projectId","project_id","projectName","projectManager","project_manager","employees","status","columns","accessorKey","header","size","Cell","cell","children","getValue","employee","fileName","_jsxFileName","lineNumber","columnNumber","table","state","isLoading","className","Object","entries","key","value","name","title","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport {\n    MaterialReactTable,\n    useMaterialReactTable,\n} from 'material-react-table';\nimport BarChart from './BarChart';\n// import './Project.css'; // Add a new CSS file for the project page\n\nconst Project = () => {\n    const [projectData, setProjectData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [projectDistribution, setProjectDistribution] = useState({});\n\n    const fetchProjectData = async () => {\n        try {\n            // Fetch project data from the API\n            const projectResponse = await axios.get('http://localhost:5001/Project_Data');\n            const projectData = projectResponse.data;\n\n            const projectDistributionCounts = projectData.reduce((acc, project) => {\n                acc[project.project_name] = (acc[project.project_name] || 0) + 1;\n                return acc;\n            }, {});\n            setProjectDistribution(projectDistributionCounts);\n\n            // Process and clean project data\n            const cleanedProjectData = projectData.map(project => ({\n                projectId: project.project_id,\n                projectName: project.project_name,\n                projectManager: project.project_manager || 'N/A',\n                employees: project.employees || [],\n                status: project.status || 'N/A',\n            }));\n\n            setProjectData(cleanedProjectData);\n        } catch (error) {\n            setError('An error occurred while fetching project data.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchProjectData();\n    }, []);\n\n    // Define columns for the Project Table\n    const columns = useMemo(() => [\n        {\n            accessorKey: 'projectId',\n            header: 'Project ID',\n            size: 150,\n        },\n        {\n            accessorKey: 'projectName',\n            header: 'Project Name',\n            size: 200,\n        },\n        {\n            accessorKey: 'projectManager',\n            header: 'Project Manager',\n            size: 200,\n        },\n        {\n            accessorKey: 'employees',\n            header: 'Employees',\n            size: 200,\n            Cell: ({ cell }) => (\n                <select>\n                    {cell.getValue().map(employee => (\n                        <option key={employee}>{employee}</option>\n                    ))}\n                </select>\n            ),\n        },\n        {\n            accessorKey: 'status',\n            header: 'Status',\n            size: 150,\n        },\n    ], []);\n\n    const table = useMaterialReactTable({\n        columns,\n        data: projectData,\n        state: { isLoading: loading },\n    });\n\n    return (\n        <div className=\"Project-container\">\n            <h1 className=\"title\">Project Overview</h1>\n            <div className=\"ProjectTable\">\n                {error ? (\n                    <p className=\"error-text\">{error}</p>\n                ) : (\n                    <MaterialReactTable table={table} />\n                )}\n            </div>\n            <div className=\"final-container\">\n                <div className=\"chart-container1\">\n                    <div className=\"chart2\">\n                        <h2>Project Distribution</h2>\n                        <BarChart\n                            data={Object.entries(projectDistribution).map(([key, value]) => ({ name: key, value }))}\n                            title='Project Distribution'\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Project;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}