{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport BarChart from './BarChart'; // Assume BarChart component already exists\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Project = () => {\n  _s();\n  const [projectsData, setProjectsData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [projectCounts, setProjectCounts] = useState({});\n  const [employeeMap, setEmployeeMap] = useState(new Map());\n  const [pagination, setPagination] = useState({\n    pageIndex: 0,\n    pageSize: 5\n  });\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, '');\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  const fetchData = async () => {\n    try {\n      const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails')]);\n      const employeeData = cleanFieldNames(employeeResponse.data);\n      const timesheetData = cleanFieldNames(timesheetResponse.data);\n      const companyDetailsData = cleanFieldNames(companyDetailsResponse.data);\n      const userProjectMap = new Map();\n      timesheetData.forEach(entry => {\n        const {\n          User_Id,\n          project\n        } = entry;\n        const company = companyDetailsData.find(company => company.company_id === project);\n        if (company) {\n          if (!userProjectMap.has(company.company_id)) {\n            userProjectMap.set(company.company_id, new Set());\n          }\n          userProjectMap.get(company.company_id).add(User_Id);\n        }\n      });\n\n      // Build employee map\n      const employeeMap = new Map();\n      employeeData.forEach(employee => {\n        employeeMap.set(employee.Emp_ID, `${employee.User_Fname} ${employee.User_Lname}`);\n      });\n      setEmployeeMap(employeeMap);\n      const projectCounts = {};\n      companyDetailsData.forEach(company => {\n        const employees = userProjectMap.get(company.company_id) || new Set();\n        projectCounts[company.company_name] = employees.size;\n      });\n      setProjectCounts(projectCounts);\n      const processedProjectsData = companyDetailsData.map(company => {\n        const employees = userProjectMap.get(company.company_id) || new Set();\n        const employeeList = [...employees].map(empId => employeeMap.get(empId)).join(', ');\n        return {\n          id: company.company_id,\n          name: company.company_name || 'N/A',\n          manager: 'N/A',\n          // You can fetch Project Manager if available from another source\n          employees: employeeList.length > 0 ? employeeList : 'No Employees Assigned',\n          status: company.status || 'N/A'\n        };\n      });\n      setProjectsData(processedProjectsData);\n      if (JSON.stringify(processedProjectsData) !== JSON.stringify(projectsData)) {\n        setProjectsData(processedProjectsData);\n      }\n    } catch (error) {\n      setError('An error occurred while fetching project data.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 10000); // You can adjust the interval as needed\n    return () => clearInterval(interval);\n  }, [projectsData]);\n  const columns = useMemo(() => [{\n    accessorKey: 'name',\n    header: 'Project Name',\n    size: 150\n  }, {\n    accessorKey: 'manager',\n    header: 'Project Manager',\n    size: 200\n  }, {\n    accessorKey: 'employees',\n    header: 'Employees Working',\n    size: 300,\n    Cell: ({\n      cell\n    }) => /*#__PURE__*/_jsxDEV(\"select\", {\n      children: cell.getValue().split(', ').map((employee, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: employee,\n        children: employee\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }, this)\n  }, {\n    accessorKey: 'status',\n    header: 'Status',\n    size: 150\n  }], []);\n  const table = useMaterialReactTable({\n    columns,\n    data: projectsData,\n    state: {\n      isLoading: loading,\n      pagination\n    },\n    onPaginationChange: setPagination,\n    enableFullScreenToggle: false\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Projects Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(MaterialReactTable, {\n        table: table\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Project Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n            data: Object.entries(projectCounts).map(([key, value]) => ({\n              name: key,\n              value\n            })),\n            text: \"Number of Employees\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n};\n_s(Project, \"zqY3/UA8SWC6W1b/iEjiCrSYFXg=\", false, function () {\n  return [useMaterialReactTable];\n});\n_c = Project;\nexport default Project;\nvar _c;\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","MaterialReactTable","useMaterialReactTable","BarChart","jsxDEV","_jsxDEV","Project","_s","projectsData","setProjectsData","loading","setLoading","error","setError","projectCounts","setProjectCounts","employeeMap","setEmployeeMap","Map","pagination","setPagination","pageIndex","pageSize","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","Promise","all","get","employeeData","timesheetData","companyDetailsData","userProjectMap","forEach","entry","User_Id","project","company","find","company_id","has","set","Set","add","employee","Emp_ID","User_Fname","User_Lname","employees","company_name","size","processedProjectsData","employeeList","empId","join","id","name","manager","length","status","JSON","stringify","interval","setInterval","clearInterval","columns","accessorKey","header","Cell","cell","children","getValue","split","index","fileName","_jsxFileName","lineNumber","columnNumber","table","state","isLoading","onPaginationChange","enableFullScreenToggle","className","text","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport {\n    MaterialReactTable,\n    useMaterialReactTable,\n} from 'material-react-table';\nimport BarChart from './BarChart';  // Assume BarChart component already exists\n\nconst Project = () => {\n    const [projectsData, setProjectsData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [projectCounts, setProjectCounts] = useState({});\n    const [employeeMap, setEmployeeMap] = useState(new Map());\n    const [pagination, setPagination] = useState({\n        pageIndex: 0,\n        pageSize: 5,\n    });\n\n    const cleanFieldNames = (data) => {\n        return data.map((item) => {\n            const cleanedItem = {};\n            for (const [key, value] of Object.entries(item)) {\n                const cleanedKey = key.replace(/^\\uFEFF/, '');\n                cleanedItem[cleanedKey] = value;\n            }\n            return cleanedItem;\n        });\n    };\n\n    const fetchData = async () => {\n        try {\n            const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([\n                axios.get('http://localhost:5001/Employee_Data1'),\n                axios.get('http://localhost:5001/timesheet'),\n                axios.get('http://localhost:5001/CompanyDetails'),\n            ]);\n\n            const employeeData = cleanFieldNames(employeeResponse.data);\n            const timesheetData = cleanFieldNames(timesheetResponse.data);\n            const companyDetailsData = cleanFieldNames(companyDetailsResponse.data);\n\n            const userProjectMap = new Map();\n            timesheetData.forEach((entry) => {\n                const { User_Id, project } = entry;\n                const company = companyDetailsData.find(\n                    (company) => company.company_id === project\n                );\n\n                if (company) {\n                    if (!userProjectMap.has(company.company_id)) {\n                        userProjectMap.set(company.company_id, new Set());\n                    }\n                    userProjectMap.get(company.company_id).add(User_Id);\n                }\n            });\n\n            // Build employee map\n            const employeeMap = new Map();\n            employeeData.forEach((employee) => {\n                employeeMap.set(employee.Emp_ID, `${employee.User_Fname} ${employee.User_Lname}`);\n            });\n            setEmployeeMap(employeeMap);\n\n            const projectCounts = {};\n            companyDetailsData.forEach((company) => {\n                const employees = userProjectMap.get(company.company_id) || new Set();\n                projectCounts[company.company_name] = employees.size;\n            });\n\n            setProjectCounts(projectCounts);\n\n            const processedProjectsData = companyDetailsData.map((company) => {\n                const employees = userProjectMap.get(company.company_id) || new Set();\n                const employeeList = [...employees].map((empId) => employeeMap.get(empId)).join(', ');\n\n                return {\n                    id: company.company_id,\n                    name: company.company_name || 'N/A',\n                    manager: 'N/A',  // You can fetch Project Manager if available from another source\n                    employees: employeeList.length > 0 ? employeeList : 'No Employees Assigned',\n                    status: company.status || 'N/A',\n                };\n            });\n\n            setProjectsData(processedProjectsData);\n            if (JSON.stringify(processedProjectsData) !== JSON.stringify(projectsData)) {\n                setProjectsData(processedProjectsData);\n            }\n\n        } catch (error) {\n            setError('An error occurred while fetching project data.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n        const interval = setInterval(fetchData, 10000); // You can adjust the interval as needed\n        return () => clearInterval(interval);\n    }, [projectsData]);\n\n    const columns = useMemo(() => [\n        {\n            accessorKey: 'name',\n            header: 'Project Name',\n            size: 150,\n        },\n        {\n            accessorKey: 'manager',\n            header: 'Project Manager',\n            size: 200,\n        },\n        {\n            accessorKey: 'employees',\n            header: 'Employees Working',\n            size: 300,\n            Cell: ({ cell }) => (\n                <select>\n                    {cell.getValue().split(', ').map((employee, index) => (\n                        <option key={index} value={employee}>{employee}</option>\n                    ))}\n                </select>\n            ),\n        },\n        {\n            accessorKey: 'status',\n            header: 'Status',\n            size: 150,\n        },\n    ], []);\n\n    const table = useMaterialReactTable({\n        columns,\n        data: projectsData,\n        state: { isLoading: loading, pagination },\n        onPaginationChange: setPagination,\n        enableFullScreenToggle: false,\n    });\n\n    return (\n        <div className=\"Overview-container\">\n            <h1 className=\"title\">Projects Overview</h1>\n            <div className=\"EmployeeTable\">\n                {error ? (\n                    <p className=\"error-text\">{error}</p>\n                ) : (\n                    <MaterialReactTable table={table} />\n                )}\n            </div>\n            <div className=\"final-container\">\n                <div className=\"chart-container\">\n                    <div className=\"chart1\">\n                        <h2>Project Distribution</h2>\n                        <BarChart\n                            data={Object.entries(projectCounts).map(([key, value]) => ({ name: key, value }))}\n                            text='Number of Employees'\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Project;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}