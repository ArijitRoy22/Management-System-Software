{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalEmployees, setTotalEmployees] = useState(0); // New state for total employees\n  const [totalHours, setTotalHours] = useState({\n    hours: 0,\n    mins: 0\n  }); // New state for total hours\n\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  const calculateTotalHours = timesheetData => {\n    const totalMinutes = {\n      total: 0\n    };\n    timesheetData.forEach(entry => {\n      const [hours, minutes, seconds] = entry.hours.split(':').map(Number);\n      const totalMinutesForEntry = hours * 60 + minutes + seconds / 60;\n      totalMinutes.total += totalMinutesForEntry;\n      if (!totalMinutes[entry.User_Id]) {\n        totalMinutes[entry.User_Id] = 0;\n      }\n      totalMinutes[entry.User_Id] += totalMinutesForEntry;\n    });\n    const convertToHoursAndMinutes = minutes => {\n      const hours = Math.floor(minutes / 60);\n      const mins = Math.round(minutes % 60);\n      return {\n        hours,\n        mins\n      };\n    };\n    const totalHours = convertToHoursAndMinutes(totalMinutes.total);\n    setTotalHours(totalHours); // Set the total hours state\n\n    return totalMinutes;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails'), axios.get('http://localhost:5001/Modules_Tasks')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n        const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n        const userProjectTaskMap = new Map();\n        timesheetData.forEach(entry => {\n          const {\n            User_Id,\n            project,\n            task\n          } = entry;\n          const company = companyDetailsData.find(company => company.company_id === project);\n          const taskDetails = moduleTaskData.find(module => module.m_slno === task);\n          if (company || taskDetails) {\n            if (!userProjectTaskMap.has(User_Id)) {\n              userProjectTaskMap.set(User_Id, {\n                projects: new Set(),\n                tasks: new Set()\n              });\n            }\n            if (company) {\n              userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n            }\n            if (taskDetails) {\n              userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n            }\n          }\n        });\n        const processedData = employeeData.map(employee => {\n          var _userProjectTaskMap$g, _userProjectTaskMap$g2;\n          const projectSet = ((_userProjectTaskMap$g = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g === void 0 ? void 0 : _userProjectTaskMap$g.projects) || new Set();\n          const taskSet = ((_userProjectTaskMap$g2 = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g2 === void 0 ? void 0 : _userProjectTaskMap$g2.tasks) || new Set();\n          const formattedProjects = [...projectSet].length > 0 ? [...projectSet].join(', ') : 'No project assigned';\n          const formattedTasks = [...taskSet].length > 0 ? [...taskSet].join(', ') : 'No task assigned';\n          return {\n            id: employee.Emp_ID,\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            companyName: formattedProjects,\n            taskName: formattedTasks\n          };\n        });\n        setEmployeesData(processedData);\n        setTotalEmployees(processedData.length); // Set the total number of employees\n\n        const totalMinutes = calculateTotalHours(timesheetData); // Calculate total hours and get minutes per user\n\n        // Add total hours for each user to processed data\n        const processedDataWithHours = processedData.map(employee => ({\n          ...employee,\n          totalHours: totalMinutes[employee.id] ? convertToHoursAndMinutes(totalMinutes[employee.id]) : {\n            hours: 0,\n            mins: 0\n          }\n        }));\n        setEmployeesData(processedDataWithHours);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Time Sheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counts-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"EmployeeCount\",\n        children: [\"Total Number of Employees: \", totalEmployees]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"TimeCount\",\n        children: [\"Total Time: \", totalHours.hours, \" hrs \", totalHours.mins, \" mins\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: loading && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading-text\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Employee Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Task\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Total Hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 37\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: employeesData.map((employee, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.companyName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.taskName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [employee.totalHours.hours, \" hrs \", employee.totalHours.mins, \" mins\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 41\n              }, this), \" \"]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n};\n_s(Overview, \"kelNumOdYh7bo9pW6kkYjfYjaXQ=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","totalEmployees","setTotalEmployees","totalHours","setTotalHours","hours","mins","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","calculateTotalHours","timesheetData","totalMinutes","total","forEach","entry","minutes","seconds","split","Number","totalMinutesForEntry","User_Id","convertToHoursAndMinutes","Math","floor","round","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","moduleTaskResponse","Promise","all","get","employeeData","rawCompanyDetailsData","moduleTaskData","companyDetailsData","userProjectTaskMap","Map","project","task","company","find","company_id","taskDetails","module","m_slno","has","set","projects","Set","tasks","add","company_name","mod_name","processedData","employee","_userProjectTaskMap$g","_userProjectTaskMap$g2","projectSet","Emp_ID","taskSet","formattedProjects","length","join","formattedTasks","id","name","User_Fname","User_Lname","email","User_Email","status","User_Status","companyName","taskName","processedDataWithHours","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\n\nconst Overview = () => {\n    const [employeesData, setEmployeesData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [totalEmployees, setTotalEmployees] = useState(0); // New state for total employees\n    const [totalHours, setTotalHours] = useState({ hours: 0, mins: 0 }); // New state for total hours\n\n    const cleanFieldNames = (data) => {\n        return data.map((item) => {\n            const cleanedItem = {};\n            for (const [key, value] of Object.entries(item)) {\n                const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n                cleanedItem[cleanedKey] = value;\n            }\n            return cleanedItem;\n        });\n    };\n\n    const calculateTotalHours = (timesheetData) => {\n        const totalMinutes = { total: 0 };\n        timesheetData.forEach((entry) => {\n            const [hours, minutes, seconds] = entry.hours.split(':').map(Number);\n            const totalMinutesForEntry = hours * 60 + minutes + seconds / 60;\n\n            totalMinutes.total += totalMinutesForEntry;\n\n            if (!totalMinutes[entry.User_Id]) {\n                totalMinutes[entry.User_Id] = 0;\n            }\n            totalMinutes[entry.User_Id] += totalMinutesForEntry;\n        });\n\n        const convertToHoursAndMinutes = (minutes) => {\n            const hours = Math.floor(minutes / 60);\n            const mins = Math.round(minutes % 60);\n            return { hours, mins };\n        };\n\n        const totalHours = convertToHoursAndMinutes(totalMinutes.total);\n        setTotalHours(totalHours); // Set the total hours state\n\n        return totalMinutes;\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([\n                    axios.get('http://localhost:5001/Employee_Data1'),\n                    axios.get('http://localhost:5001/timesheet'),\n                    axios.get('http://localhost:5001/CompanyDetails'),\n                    axios.get('http://localhost:5001/Modules_Tasks'),\n                ]);\n\n                const employeeData = employeeResponse.data;\n                const timesheetData = timesheetResponse.data;\n                const rawCompanyDetailsData = companyDetailsResponse.data;\n                const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n\n                const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n                const userProjectTaskMap = new Map();\n                timesheetData.forEach((entry) => {\n                    const { User_Id, project, task } = entry;\n                    const company = companyDetailsData.find(\n                        (company) => company.company_id === project\n                    );\n\n                    const taskDetails = moduleTaskData.find(\n                        (module) => module.m_slno === task\n                    );\n\n                    if (company || taskDetails) {\n                        if (!userProjectTaskMap.has(User_Id)) {\n                            userProjectTaskMap.set(User_Id, { projects: new Set(), tasks: new Set() });\n                        }\n\n                        if (company) {\n                            userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n                        }\n\n                        if (taskDetails) {\n                            userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n                        }\n                    }\n                });\n\n                const processedData = employeeData.map((employee) => {\n                    const projectSet = userProjectTaskMap.get(employee.Emp_ID)?.projects || new Set();\n                    const taskSet = userProjectTaskMap.get(employee.Emp_ID)?.tasks || new Set();\n\n                    const formattedProjects = [...projectSet].length > 0\n                        ? [...projectSet].join(', ')\n                        : 'No project assigned';\n\n                    const formattedTasks = [...taskSet].length > 0\n                        ? [...taskSet].join(', ')\n                        : 'No task assigned';\n\n                    return {\n                        id: employee.Emp_ID,\n                        name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n                        email: employee.User_Email || 'N/A',\n                        status: employee.User_Status || 'N/A',\n                        companyName: formattedProjects,\n                        taskName: formattedTasks,\n                    };\n                });\n\n                setEmployeesData(processedData);\n                setTotalEmployees(processedData.length); // Set the total number of employees\n\n                const totalMinutes = calculateTotalHours(timesheetData); // Calculate total hours and get minutes per user\n\n                // Add total hours for each user to processed data\n                const processedDataWithHours = processedData.map((employee) => ({\n                    ...employee,\n                    totalHours: totalMinutes[employee.id] ? convertToHoursAndMinutes(totalMinutes[employee.id]) : { hours: 0, mins: 0 },\n                }));\n\n                setEmployeesData(processedDataWithHours);\n\n            } catch (error) {\n                setError('An error occurred while fetching employee data.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n        const interval = setInterval(fetchData, 2000);\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div className=\"Overview-container\">\n            <h1 className=\"title\">Employee Time Sheet</h1>\n            <div className='counts-container'>\n                <p className='EmployeeCount'>Total Number of Employees: {totalEmployees}</p> {/* Display total employees */}\n                <p className='TimeCount'>Total Time: {totalHours.hours} hrs {totalHours.mins} mins</p> {/* Display total time */}\n            </div>\n            <div className=\"EmployeeTable\">\n                {loading && !error ? (\n                    <p className=\"loading-text\">Loading...</p>\n                ) : error ? (\n                    <p className=\"error-text\">{error}</p>\n                ) : (\n                    <div className=\"table-container\">\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>Employee Name</th>\n                                    <th>Email</th>\n                                    <th>Status</th>\n                                    <th>Project</th>\n                                    <th>Task</th>\n                                    <th>Total Hours</th> {/* New column for total hours */}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {employeesData.map((employee, index) => (\n                                    <tr key={index}>\n                                        <td>{employee.name}</td>\n                                        <td>{employee.email}</td>\n                                        <td>{employee.status}</td>\n                                        <td>{employee.companyName}</td>\n                                        <td>{employee.taskName}</td>\n                                        <td>{employee.totalHours.hours} hrs {employee.totalHours.mins} mins</td> {/* Display total hours per employee */}\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}