{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n\n        // Clean the company details data\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n        // Process unique user_id and project pairs\n        const userProjectCompanyMap = new Map();\n        timesheetData.forEach(entry => {\n          const {\n            User_Id,\n            project\n          } = entry;\n          const company = companyDetailsData.find(company => company.company_id === project);\n          if (company) {\n            if (!userProjectCompanyMap.has(User_Id)) {\n              userProjectCompanyMap.set(User_Id, new Set());\n            }\n            userProjectCompanyMap.get(User_Id).add(company.company_name);\n          }\n        });\n\n        // Process employee data for display in table\n        const processedData = employeeData.map(employee => {\n          const projectSet = userProjectCompanyMap.get(employee.Emp_ID) || new Set();\n          const projectNamesArray = [...projectSet];\n          console.log(projectNamesArray);\n\n          // Create formatted project names with two per line and commas handled correctly\n          const formattedProjects = projectNamesArray.length > 0 ? projectNamesArray.reduce((acc, project, index) => {\n            if (index > 0 && index % 2 === 0) {\n              acc.push( /*#__PURE__*/_jsxDEV(\"br\", {}, `br-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 28\n              }, this)); // Add a line break after every two projects\n            }\n            acc.push( /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"project-cell\",\n              children: [project, index !== projectNamesArray.length - 1 ? ', ' : '']\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 19\n            }, this));\n            return acc;\n          }, []) : 'No project assigned';\n          return {\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            companyName: formattedProjects\n          };\n        });\n        setEmployeesData(processedData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Time Sheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: loading && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading-text\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Employees Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Employee Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: employeesData.map((employee, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.companyName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 17\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(Overview, \"55THOB/m7eZcGNdMGjyDf1FNpOg=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","Promise","all","get","employeeData","timesheetData","rawCompanyDetailsData","companyDetailsData","userProjectCompanyMap","Map","forEach","entry","User_Id","project","company","find","company_id","has","set","Set","add","company_name","processedData","employee","projectSet","Emp_ID","projectNamesArray","console","log","formattedProjects","length","reduce","acc","index","push","fileName","_jsxFileName","lineNumber","columnNumber","className","children","name","User_Fname","User_Lname","email","User_Email","status","User_Status","companyName","interval","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\n\nconst Overview = () => {\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const cleanFieldNames = (data) => {\n    return data.map((item) => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([\n          axios.get('http://localhost:5001/Employee_Data1'),\n          axios.get('http://localhost:5001/timesheet'),\n          axios.get('http://localhost:5001/CompanyDetails'),\n        ]);\n\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n\n        // Clean the company details data\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n\n        // Process unique user_id and project pairs\n        const userProjectCompanyMap = new Map();\n        timesheetData.forEach((entry) => {\n          const { User_Id, project } = entry;\n          const company = companyDetailsData.find(\n            (company) => company.company_id === project\n          );\n\n          if (company) {\n            if (!userProjectCompanyMap.has(User_Id)) {\n              userProjectCompanyMap.set(User_Id, new Set());\n            }\n            userProjectCompanyMap.get(User_Id).add(company.company_name);\n          }\n        });\n\n        // Process employee data for display in table\n        const processedData = employeeData.map((employee) => {\n          const projectSet = userProjectCompanyMap.get(employee.Emp_ID) || new Set();\n          const projectNamesArray = [...projectSet];\n          console.log(projectNamesArray)\n\n          // Create formatted project names with two per line and commas handled correctly\n          const formattedProjects = projectNamesArray.length > 0\n            ? projectNamesArray.reduce((acc, project, index) => {\n                if (index > 0 && index % 2 === 0) {\n                  acc.push(<br key={`br-${index}`} />); // Add a line break after every two projects\n                }\n                acc.push(\n                  <span key={index} className=\"project-cell\">\n                    {project}\n                    {index !== projectNamesArray.length - 1 ? ', ' : ''}\n                  </span>\n                );\n                return acc;\n              }, [])\n            : 'No project assigned';\n\n          return {\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            companyName: formattedProjects,\n          };\n        });\n\n        setEmployeesData(processedData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n\n  }, []);\n\n  return (\n    <div className=\"Overview-container\">\n  <h1 className=\"title\">Employee Time Sheet</h1>\n  <div className=\"EmployeeTable\">\n    \n    {loading && !error ? (\n      <p className=\"loading-text\">Loading...</p>\n    ) : error ? (\n      <p className=\"error-text\">{error}</p>\n    ) : (\n      <div className=\"table-container\">\n        <h2>Employees Details</h2>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>Employee Name</th>\n              <th>Email</th>\n              <th>Status</th>\n              <th>Project</th>\n            </tr>\n          </thead>\n          <tbody>\n            {employeesData.map((employee, index) => (\n              <tr key={index}>\n                <td>{employee.name}</td>\n                <td>{employee.email}</td>\n                <td>{employee.status}</td>\n                <td>{employee.companyName}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    )}\n  </div>\n</div>\n\n  );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}