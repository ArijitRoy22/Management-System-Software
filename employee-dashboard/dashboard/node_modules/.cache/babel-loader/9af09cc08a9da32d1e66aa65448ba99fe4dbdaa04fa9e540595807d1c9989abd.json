{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport BarChart from './BarChart';\nimport './Overview.css';\n// import './Project.css'; // Add relevant styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectSection = () => {\n  _s();\n  const [projectData, setProjectData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [projectCounts, setProjectCounts] = useState({});\n  const fetchData = async () => {\n    try {\n      const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails')]);\n      const employeeData = employeeResponse.data;\n      const timesheetData = timesheetResponse.data;\n      const companyData = companyDetailsResponse.data;\n      const userProjectMap = new Map();\n      timesheetData.forEach(entry => {\n        const {\n          User_Id,\n          project\n        } = entry;\n        const company = companyData.find(company => company.company_id === project);\n        if (company) {\n          if (!userProjectMap.has(project)) {\n            userProjectMap.set(project, {\n              project_name: company.company_name,\n              employees: new Set()\n            });\n          }\n          const employee = employeeData.find(emp => emp.Emp_ID === User_Id);\n          if (employee) {\n            userProjectMap.get(project).employees.add(`${employee.User_Fname} ${employee.User_Lname}`);\n          }\n        }\n      });\n      const projectDetails = Array.from(userProjectMap.entries()).map(([projectId, projectInfo]) => {\n        return {\n          projectId,\n          projectName: projectInfo.project_name,\n          employees: [...projectInfo.employees]\n        };\n      });\n\n      // Count employees per project for the bar chart\n      const projectCounts = projectDetails.reduce((acc, project) => {\n        acc[project.projectName] = project.employees.length;\n        return acc;\n      }, {});\n      setProjectData(projectDetails);\n      setProjectCounts(projectCounts);\n    } catch (error) {\n      setError('An error occurred while fetching project data.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Define columns for Material React Table\n  const columns = useMemo(() => [{\n    accessorKey: 'projectId',\n    header: 'Project ID',\n    size: 150\n  }, {\n    accessorKey: 'projectName',\n    header: 'Project Name',\n    size: 200\n  }, {\n    accessorKey: 'employees',\n    header: 'Employees',\n    size: 300,\n    Cell: ({\n      cell\n    }) => /*#__PURE__*/_jsxDEV(\"select\", {\n      children: cell.getValue().map((employee, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: employee,\n        children: employee\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this)\n  }], []);\n  const table = useMaterialReactTable({\n    columns,\n    data: projectData,\n    state: {\n      isLoading: loading\n    },\n    enableFullScreenToggle: false,\n    globalFilterFn: 'contains'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Project-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Project Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ProjectTable\",\n      children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(MaterialReactTable, {\n        table: table\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ProjectChart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Project Employee Distribution\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n        data: Object.entries(projectCounts).map(([key, value]) => ({\n          name: key,\n          value\n        })),\n        text: \"Number of Employees\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n_s(ProjectSection, \"uV0yvMspGFTCFZIh/0tnB9DKWvs=\", false, function () {\n  return [useMaterialReactTable];\n});\n_c = ProjectSection;\nexport default ProjectSection;\nvar _c;\n$RefreshReg$(_c, \"ProjectSection\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","MaterialReactTable","useMaterialReactTable","BarChart","jsxDEV","_jsxDEV","ProjectSection","_s","projectData","setProjectData","loading","setLoading","error","setError","projectCounts","setProjectCounts","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","Promise","all","get","employeeData","data","timesheetData","companyData","userProjectMap","Map","forEach","entry","User_Id","project","company","find","company_id","has","set","project_name","company_name","employees","Set","employee","emp","Emp_ID","add","User_Fname","User_Lname","projectDetails","Array","from","entries","map","projectId","projectInfo","projectName","reduce","acc","length","columns","accessorKey","header","size","Cell","cell","children","getValue","index","value","fileName","_jsxFileName","lineNumber","columnNumber","table","state","isLoading","enableFullScreenToggle","globalFilterFn","className","Object","key","name","text","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport {\n    MaterialReactTable,\n    useMaterialReactTable,\n} from 'material-react-table';\nimport BarChart from './BarChart';\nimport './Overview.css';\n// import './Project.css'; // Add relevant styling\n\nconst ProjectSection = () => {\n    const [projectData, setProjectData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [projectCounts, setProjectCounts] = useState({});\n\n    const fetchData = async () => {\n        try {\n            const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([\n                axios.get('http://localhost:5001/Employee_Data1'),\n                axios.get('http://localhost:5001/timesheet'),\n                axios.get('http://localhost:5001/CompanyDetails'),\n            ]);\n\n            const employeeData = employeeResponse.data;\n            const timesheetData = timesheetResponse.data;\n            const companyData = companyDetailsResponse.data;\n\n            const userProjectMap = new Map();\n            timesheetData.forEach((entry) => {\n                const { User_Id, project } = entry;\n                const company = companyData.find((company) => company.company_id === project);\n\n                if (company) {\n                    if (!userProjectMap.has(project)) {\n                        userProjectMap.set(project, { project_name: company.company_name, employees: new Set() });\n                    }\n                    const employee = employeeData.find((emp) => emp.Emp_ID === User_Id);\n                    if (employee) {\n                        userProjectMap.get(project).employees.add(`${employee.User_Fname} ${employee.User_Lname}`);\n                    }\n                }\n            });\n\n            const projectDetails = Array.from(userProjectMap.entries()).map(([projectId, projectInfo]) => {\n                return {\n                    projectId,\n                    projectName: projectInfo.project_name,\n                    employees: [...projectInfo.employees],\n                };\n            });\n\n            // Count employees per project for the bar chart\n            const projectCounts = projectDetails.reduce((acc, project) => {\n                acc[project.projectName] = project.employees.length;\n                return acc;\n            }, {});\n\n            setProjectData(projectDetails);\n            setProjectCounts(projectCounts);\n        } catch (error) {\n            setError('An error occurred while fetching project data.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    // Define columns for Material React Table\n    const columns = useMemo(() => [\n        {\n            accessorKey: 'projectId',\n            header: 'Project ID',\n            size: 150,\n        },\n        {\n            accessorKey: 'projectName',\n            header: 'Project Name',\n            size: 200,\n        },\n        {\n            accessorKey: 'employees',\n            header: 'Employees',\n            size: 300,\n            Cell: ({ cell }) => (\n                <select>\n                    {cell.getValue().map((employee, index) => (\n                        <option key={index} value={employee}>\n                            {employee}\n                        </option>\n                    ))}\n                </select>\n            ),\n        },\n    ], []);\n\n    const table = useMaterialReactTable({\n        columns,\n        data: projectData,\n        state: { isLoading: loading },\n        enableFullScreenToggle: false,\n        globalFilterFn: 'contains',\n    });\n\n    return (\n        <div className=\"Project-container\">\n            <h1 className=\"title\">Project Overview</h1>\n            <div className=\"ProjectTable\">\n                {error ? (\n                    <p className=\"error-text\">{error}</p>\n                ) : (\n                    <MaterialReactTable table={table} />\n                )}\n            </div>\n            <div className=\"ProjectChart\">\n                <h2>Project Employee Distribution</h2>\n                <BarChart\n                    data={Object.entries(projectCounts).map(([key, value]) => ({ name: key, value }))}\n                    text='Number of Employees'\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default ProjectSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}