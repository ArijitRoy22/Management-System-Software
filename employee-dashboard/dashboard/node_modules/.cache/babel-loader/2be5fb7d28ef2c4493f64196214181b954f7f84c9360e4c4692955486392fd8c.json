{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport GradientPieChart from './GradientPieChart';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalEmployees, setTotalEmployees] = useState(0); // New state for total employees\n  const [totalHours, setTotalHours] = useState({\n    hours: 0,\n    mins: 0\n  }); // New state for total hours\n  const [statusCounts, setStatusCounts] = useState({});\n  const convertToHoursAndMinutes = minutes => {\n    const hours = Math.floor(minutes / 60);\n    const mins = Math.round(minutes % 60);\n    return {\n      hours,\n      mins\n    };\n  };\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  const calculateTotalHours = timesheetData => {\n    const totalMinutes = {\n      total: 0\n    };\n    timesheetData.forEach(entry => {\n      const [hours, minutes, seconds] = entry.hours.split(':').map(Number);\n      const totalMinutesForEntry = hours * 60 + minutes + seconds / 60;\n      totalMinutes.total += totalMinutesForEntry;\n      if (!totalMinutes[entry.User_Id]) {\n        totalMinutes[entry.User_Id] = 0;\n      }\n      totalMinutes[entry.User_Id] += totalMinutesForEntry;\n    });\n    const totalHours = convertToHoursAndMinutes(totalMinutes.total);\n    setTotalHours(totalHours); // Set the total hours state\n\n    return totalMinutes;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails'), axios.get('http://localhost:5001/Modules_Tasks')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n        const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n        const userProjectTaskMap = new Map();\n        timesheetData.forEach(entry => {\n          const {\n            User_Id,\n            project,\n            task\n          } = entry;\n          const company = companyDetailsData.find(company => company.company_id === project);\n          const taskDetails = moduleTaskData.find(module => module.m_slno === task);\n          if (company || taskDetails) {\n            if (!userProjectTaskMap.has(User_Id)) {\n              userProjectTaskMap.set(User_Id, {\n                projects: new Set(),\n                tasks: new Set()\n              });\n            }\n            if (company) {\n              userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n            }\n            if (taskDetails) {\n              userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n            }\n          }\n        });\n        const statusCounts = timesheetData.reduce((acc, item) => {\n          acc[item.Status] = (acc[item.Status] || 0) + 1;\n          return acc;\n        }, {});\n        setStatusCounts(statusCounts);\n        console.log(\"status\", statusCounts);\n        const processedData = employeeData.map(employee => {\n          var _userProjectTaskMap$g, _userProjectTaskMap$g2;\n          const projectSet = ((_userProjectTaskMap$g = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g === void 0 ? void 0 : _userProjectTaskMap$g.projects) || new Set();\n          const taskSet = ((_userProjectTaskMap$g2 = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g2 === void 0 ? void 0 : _userProjectTaskMap$g2.tasks) || new Set();\n          const formattedProjects = [...projectSet].length > 0 ? [...projectSet].join(', ') : 'No project assigned';\n          const formattedTasks = [...taskSet].length > 0 ? [...taskSet].join(', ') : 'No task assigned';\n          return {\n            id: employee.Emp_ID,\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            companyName: formattedProjects,\n            taskName: formattedTasks\n          };\n        });\n        setEmployeesData(processedData);\n        setTotalEmployees(processedData.length); // Set the total number of employees\n\n        const totalMinutes = calculateTotalHours(timesheetData); // Calculate total hours and get minutes per user\n\n        // Add total hours for each user to processed data\n        const processedDataWithHours = processedData.map(employee => ({\n          ...employee,\n          totalHours: totalMinutes[employee.id] ? convertToHoursAndMinutes(totalMinutes[employee.id]) : {\n            hours: 0,\n            mins: 0\n          }\n        }));\n        setEmployeesData(processedDataWithHours);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Time Sheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counts-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"EmployeeCount\",\n        children: [\"Total Number of Employees: \", totalEmployees]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"TimeCount\",\n        children: [\"Total Time: \", totalHours.hours, \" hrs \", totalHours.mins, \" mins\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: loading && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading-text\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Employee Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Employee Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Task\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: employeesData.map((employee, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.companyName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.taskName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [employee.totalHours.hours, \" hrs \", employee.totalHours.mins, \" mins\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Status Breakdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(GradientPieChart, {\n            data: Object.entries(statusCounts).map(([key, value]) => ({\n              name: key,\n              value\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Status Breakdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(GradientPieChart, {\n            data: Object.entries(statusCounts).map(([key, value]) => ({\n              name: key,\n              value\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n};\n_s(Overview, \"6NbA25TnVgzPB2vcxAoBJUy4G94=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","axios","GradientPieChart","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","totalEmployees","setTotalEmployees","totalHours","setTotalHours","hours","mins","statusCounts","setStatusCounts","convertToHoursAndMinutes","minutes","Math","floor","round","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","calculateTotalHours","timesheetData","totalMinutes","total","forEach","entry","seconds","split","Number","totalMinutesForEntry","User_Id","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","moduleTaskResponse","Promise","all","get","employeeData","rawCompanyDetailsData","moduleTaskData","companyDetailsData","userProjectTaskMap","Map","project","task","company","find","company_id","taskDetails","module","m_slno","has","set","projects","Set","tasks","add","company_name","mod_name","reduce","acc","Status","console","log","processedData","employee","_userProjectTaskMap$g","_userProjectTaskMap$g2","projectSet","Emp_ID","taskSet","formattedProjects","length","join","formattedTasks","id","name","User_Fname","User_Lname","email","User_Email","status","User_Status","companyName","taskName","processedDataWithHours","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport GradientPieChart from './GradientPieChart';\nimport './Overview.css';\n\nconst Overview = () => {\n    const [employeesData, setEmployeesData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [totalEmployees, setTotalEmployees] = useState(0); // New state for total employees\n    const [totalHours, setTotalHours] = useState({ hours: 0, mins: 0 }); // New state for total hours\n    const [statusCounts, setStatusCounts] = useState({});\n\n\n    const convertToHoursAndMinutes = (minutes) => {\n        const hours = Math.floor(minutes / 60);\n        const mins = Math.round(minutes % 60);\n        return { hours, mins };\n    };\n\n    const cleanFieldNames = (data) => {\n        return data.map((item) => {\n            const cleanedItem = {};\n            for (const [key, value] of Object.entries(item)) {\n                const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n                cleanedItem[cleanedKey] = value;\n            }\n            return cleanedItem;\n        });\n    };\n\n    const calculateTotalHours = (timesheetData) => {\n        const totalMinutes = { total: 0 };\n        timesheetData.forEach((entry) => {\n            const [hours, minutes, seconds] = entry.hours.split(':').map(Number);\n            const totalMinutesForEntry = hours * 60 + minutes + seconds / 60;\n\n            totalMinutes.total += totalMinutesForEntry;\n\n            if (!totalMinutes[entry.User_Id]) {\n                totalMinutes[entry.User_Id] = 0;\n            }\n            totalMinutes[entry.User_Id] += totalMinutesForEntry;\n        });\n\n\n        const totalHours = convertToHoursAndMinutes(totalMinutes.total);\n        setTotalHours(totalHours); // Set the total hours state\n\n        return totalMinutes;\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([\n                    axios.get('http://localhost:5001/Employee_Data1'),\n                    axios.get('http://localhost:5001/timesheet'),\n                    axios.get('http://localhost:5001/CompanyDetails'),\n                    axios.get('http://localhost:5001/Modules_Tasks'),\n                ]);\n\n                const employeeData = employeeResponse.data;\n                const timesheetData = timesheetResponse.data;\n                const rawCompanyDetailsData = companyDetailsResponse.data;\n                const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n\n                const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n                const userProjectTaskMap = new Map();\n                timesheetData.forEach((entry) => {\n                    const { User_Id, project, task } = entry;\n                    const company = companyDetailsData.find(\n                        (company) => company.company_id === project\n                    );\n\n                    const taskDetails = moduleTaskData.find(\n                        (module) => module.m_slno === task\n                    );\n\n                    if (company || taskDetails) {\n                        if (!userProjectTaskMap.has(User_Id)) {\n                            userProjectTaskMap.set(User_Id, { projects: new Set(), tasks: new Set() });\n                        }\n\n                        if (company) {\n                            userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n                        }\n\n                        if (taskDetails) {\n                            userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n                        }\n                    }\n                });\n\n                const statusCounts = timesheetData.reduce((acc, item) => {\n                    acc[item.Status] = (acc[item.Status] || 0) + 1;\n                    return acc;\n                }, {});\n                setStatusCounts(statusCounts);\n                console.log(\"status\",statusCounts)\n\n                const processedData = employeeData.map((employee) => {\n                    const projectSet = userProjectTaskMap.get(employee.Emp_ID)?.projects || new Set();\n                    const taskSet = userProjectTaskMap.get(employee.Emp_ID)?.tasks || new Set();\n\n                    const formattedProjects = [...projectSet].length > 0\n                        ? [...projectSet].join(', ')\n                        : 'No project assigned';\n\n                    const formattedTasks = [...taskSet].length > 0\n                        ? [...taskSet].join(', ')\n                        : 'No task assigned';\n\n                    return {\n                        id: employee.Emp_ID,\n                        name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n                        email: employee.User_Email || 'N/A',\n                        status: employee.User_Status || 'N/A',\n                        companyName: formattedProjects,\n                        taskName: formattedTasks,\n                    };\n                });\n\n                setEmployeesData(processedData);\n                setTotalEmployees(processedData.length); // Set the total number of employees\n\n                const totalMinutes = calculateTotalHours(timesheetData); // Calculate total hours and get minutes per user\n\n                // Add total hours for each user to processed data\n                const processedDataWithHours = processedData.map((employee) => ({\n                    ...employee,\n                    totalHours: totalMinutes[employee.id] ? convertToHoursAndMinutes(totalMinutes[employee.id]) : { hours: 0, mins: 0 },\n                }));\n\n                setEmployeesData(processedDataWithHours);\n\n            } catch (error) {\n                setError('An error occurred while fetching employee data.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n        const interval = setInterval(fetchData, 2000);\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div className=\"Overview-container\">\n            <h1 className=\"title\">Employee Time Sheet</h1>\n            <div className='counts-container'>\n                <p className='EmployeeCount'>Total Number of Employees: {totalEmployees}</p> {/* Display total employees */}\n                <p className='TimeCount'>Total Time: {totalHours.hours} hrs {totalHours.mins} mins</p> {/* Display total time */}\n            </div>\n            <div className=\"EmployeeTable\">\n                {loading && !error ? (\n                    <p className=\"loading-text\">Loading...</p>\n                ) : error ? (\n                    <p className=\"error-text\">{error}</p>\n                ) : (\n                    <div className=\"table-container\">\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>Employee Name</th>\n                                    <th>Email</th>\n                                    <th>Employee Status</th>\n                                    <th>Project</th>\n                                    <th>Task</th>\n                                    <th>Time</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {employeesData.map((employee, index) => (\n                                    <tr key={index}>\n                                        <td>{employee.name}</td>\n                                        <td>{employee.email}</td>\n                                        <td>{employee.status}</td>\n                                        <td>{employee.companyName}</td>\n                                        <td>{employee.taskName}</td>\n                                        <td>{employee.totalHours.hours} hrs {employee.totalHours.mins} mins</td> \n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                )}\n            </div>\n            <div className='final-container'>\n                <div className='chart-container'>\n                    <div className='chart1'>\n                        <h2>Status Breakdown</h2>\n                        <GradientPieChart\n                            data={Object.entries(statusCounts).map(([key, value]) => ({ name: key, value }))}\n                        />\n                    </div>\n                </div>\n\n                <div className='chart-container'>\n                    <div className='chart2'>\n                        <h2>Status Breakdown</h2>\n                        <GradientPieChart\n                            data={Object.entries(statusCounts).map(([key, value]) => ({ name: key, value }))}\n                        />\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}