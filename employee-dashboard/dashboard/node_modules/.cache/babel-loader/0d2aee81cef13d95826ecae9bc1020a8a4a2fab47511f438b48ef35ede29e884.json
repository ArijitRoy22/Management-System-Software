{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  useEffect(() => {\n    const fetchEmployeeData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n\n        // Clean the company details data\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n        // console.log(\"Cleaned Company Details Data:\", cleanFieldNames(rawCompanyDetailsData));\n\n        // Process unique user_id and project pairs\n        const userProjectPairs = new Set();\n        timesheetData.forEach(entry => {\n          const {\n            User_Id,\n            project\n          } = entry;\n          const pair = `${User_Id}-${project}`;\n          userProjectPairs.add(pair);\n        });\n\n        // console.log(\"Unique User_Id and Project pairs:\");\n        userProjectPairs.forEach(pair => {\n          const [userId, project] = pair.split('-');\n          console.log(`User_Id: ${userId}, Project: ${project}`);\n        });\n\n        // Process unique company_id and company_name pairs\n        const uniqueCompanies = new Set();\n        companyDetailsData.forEach(company => {\n          const {\n            company_id,\n            company_name\n          } = company;\n          const pair = `${company_id}-${company_name}`;\n          uniqueCompanies.add(pair);\n        });\n\n        // console.log(\"Unique Company_id and Company_name pairs:\");\n        uniqueCompanies.forEach(pair => {\n          const [companyId, companyName] = pair.split('-');\n          console.log(`Company_id: ${companyId}, Company_name: ${companyName}`);\n        });\n\n        // Process employee data for display (if needed later)\n        const processedData = employeeData.map(employee => ({\n          name: employee.User_Fname + \" \" + employee.User_Lname || 'N/A',\n          email: employee.User_Email || 'N/A',\n          status: employee.User_Status || 'N/A'\n        }));\n        setEmployeesData(processedData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchEmployeeData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Employees Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), loading && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Employee Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: employeesData.map((employee, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(Overview, \"55THOB/m7eZcGNdMGjyDf1FNpOg=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","fetchEmployeeData","employeeResponse","timesheetResponse","companyDetailsResponse","Promise","all","get","employeeData","timesheetData","rawCompanyDetailsData","companyDetailsData","userProjectPairs","Set","forEach","entry","User_Id","project","pair","add","userId","split","console","log","uniqueCompanies","company","company_id","company_name","companyId","companyName","processedData","employee","name","User_Fname","User_Lname","email","User_Email","status","User_Status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\n\nconst Overview = () => {\n    const [employeesData, setEmployeesData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const cleanFieldNames = (data) => {\n        return data.map(item => {\n          const cleanedItem = {};\n          for (const [key, value] of Object.entries(item)) {\n            const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n            cleanedItem[cleanedKey] = value;\n          }\n          return cleanedItem;\n        });\n      };\n      \n      useEffect(() => {\n        const fetchEmployeeData = async () => {\n          try {\n            const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([\n              axios.get('http://localhost:5001/Employee_Data1'),\n              axios.get('http://localhost:5001/timesheet'),\n              axios.get('http://localhost:5001/CompanyDetails'),\n            ]);\n      \n            const employeeData = employeeResponse.data;\n            const timesheetData = timesheetResponse.data;\n            const rawCompanyDetailsData = companyDetailsResponse.data;\n      \n            // Clean the company details data\n            const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n            // console.log(\"Cleaned Company Details Data:\", cleanFieldNames(rawCompanyDetailsData));\n      \n            // Process unique user_id and project pairs\n            const userProjectPairs = new Set();\n            timesheetData.forEach((entry) => {\n              const { User_Id, project } = entry;\n              const pair = `${User_Id}-${project}`;\n              userProjectPairs.add(pair);\n            });\n      \n            // console.log(\"Unique User_Id and Project pairs:\");\n            userProjectPairs.forEach((pair) => {\n              const [userId, project] = pair.split('-');\n              console.log(`User_Id: ${userId}, Project: ${project}`);\n            });\n      \n            // Process unique company_id and company_name pairs\n            const uniqueCompanies = new Set();\n            companyDetailsData.forEach((company) => {\n              const { company_id, company_name } = company;\n              const pair = `${company_id}-${company_name}`;\n              uniqueCompanies.add(pair);\n            });\n      \n            // console.log(\"Unique Company_id and Company_name pairs:\");\n            uniqueCompanies.forEach((pair) => {\n              const [companyId, companyName] = pair.split('-');\n              console.log(`Company_id: ${companyId}, Company_name: ${companyName}`);\n            });\n      \n            // Process employee data for display (if needed later)\n            const processedData = employeeData.map((employee) => ({\n              name: employee.User_Fname + \" \" + employee.User_Lname || 'N/A',\n              email: employee.User_Email || 'N/A',\n              status: employee.User_Status || 'N/A',\n            }));\n      \n            setEmployeesData(processedData);\n          } catch (error) {\n            setError('An error occurred while fetching employee data.');\n          } finally {\n            setLoading(false);\n          }\n        };\n      \n        fetchEmployeeData();\n      }, []);\n      \n\n    return (\n        <div className=\"Overview-container\">\n            <h1 className=\"title\">Employee Details</h1>\n            <div className=\"EmployeeTable\">\n                <h2>Employees Details</h2>\n                {loading && !error ? (\n                    <p>Loading...</p>\n                ) : error ? (\n                    <p>{error}</p>\n                ) : (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Employee Name</th>\n                                <th>Email</th>\n                                <th>Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {employeesData.map((employee, index) => (\n                                <tr key={index}>\n                                    <td>{employee.name}</td>\n                                    <td>{employee.email}</td>\n                                    <td>{employee.status}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}