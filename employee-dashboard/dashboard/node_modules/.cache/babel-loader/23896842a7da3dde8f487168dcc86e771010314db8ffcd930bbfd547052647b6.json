{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse, modulesTasksResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails'), axios.get('http://localhost:5001/Modules_Tasks')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n        const rawModulesTasksData = modulesTasksResponse.data;\n\n        // Clean company details and module task data\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n        const modulesTasksData = cleanFieldNames(rawModulesTasksData);\n\n        // Map tasks from timesheet to mod_name\n        const userProjectTaskMap = new Map();\n        timesheetData.forEach(entry => {\n          const {\n            User_Id,\n            project,\n            task\n          } = entry;\n          const company = companyDetailsData.find(company => company.company_id === project);\n          const module = modulesTasksData.find(mod => mod.m_slno === task);\n          if (company && module) {\n            if (!userProjectTaskMap.has(User_Id)) {\n              userProjectTaskMap.set(User_Id, new Set());\n            }\n            userProjectTaskMap.get(User_Id).add({\n              company: company.company_name,\n              task: module.mod_name\n            });\n          }\n        });\n\n        // Process employee data for display in table\n        const processedData = employeeData.map(employee => {\n          const projectTaskSet = userProjectTaskMap.get(employee.Emp_ID) || new Set();\n          const projectTasksArray = [...projectTaskSet];\n\n          // Handle cases with no project or task\n          const formattedProjectTasks = projectTasksArray.length > 0 ? projectTasksArray.reduce((acc, {\n            company,\n            task\n          }, index) => {\n            if (index > 0 && index % 2 === 0) {\n              acc.push( /*#__PURE__*/_jsxDEV(\"br\", {}, `br-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 28\n              }, this)); // Line break after every two entries\n            }\n            acc.push( /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"project-task-cell\",\n              children: [\"Project: \", company, \", Task: \", task, index !== projectTasksArray.length - 1 ? ', ' : '']\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }, this));\n            return acc;\n          }, []) : 'No project or task assigned';\n          return {\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            projectTasks: formattedProjectTasks\n          };\n        });\n        setEmployeesData(processedData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Time Sheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: loading && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading-text\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Employee Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project and Task\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: employeesData.map((employee, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.projectTasks\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Overview, \"55THOB/m7eZcGNdMGjyDf1FNpOg=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","modulesTasksResponse","Promise","all","get","employeeData","timesheetData","rawCompanyDetailsData","rawModulesTasksData","companyDetailsData","modulesTasksData","userProjectTaskMap","Map","forEach","entry","User_Id","project","task","company","find","company_id","module","mod","m_slno","has","set","Set","add","company_name","mod_name","processedData","employee","projectTaskSet","Emp_ID","projectTasksArray","formattedProjectTasks","length","reduce","acc","index","push","fileName","_jsxFileName","lineNumber","columnNumber","className","children","name","User_Fname","User_Lname","email","User_Email","status","User_Status","projectTasks","interval","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\n\nconst Overview = () => {\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const cleanFieldNames = (data) => {\n    return data.map((item) => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse, modulesTasksResponse] = await Promise.all([\n          axios.get('http://localhost:5001/Employee_Data1'),\n          axios.get('http://localhost:5001/timesheet'),\n          axios.get('http://localhost:5001/CompanyDetails'),\n          axios.get('http://localhost:5001/Modules_Tasks')\n        ]);\n\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n        const rawModulesTasksData = modulesTasksResponse.data;\n\n        // Clean company details and module task data\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n        const modulesTasksData = cleanFieldNames(rawModulesTasksData);\n\n        // Map tasks from timesheet to mod_name\n        const userProjectTaskMap = new Map();\n        timesheetData.forEach((entry) => {\n          const { User_Id, project, task } = entry;\n          const company = companyDetailsData.find(\n            (company) => company.company_id === project\n          );\n          const module = modulesTasksData.find(\n            (mod) => mod.m_slno === task\n          );\n\n          if (company && module) {\n            if (!userProjectTaskMap.has(User_Id)) {\n              userProjectTaskMap.set(User_Id, new Set());\n            }\n            userProjectTaskMap.get(User_Id).add({\n              company: company.company_name,\n              task: module.mod_name,\n            });\n          }\n        });\n\n        // Process employee data for display in table\n        const processedData = employeeData.map((employee) => {\n          const projectTaskSet = userProjectTaskMap.get(employee.Emp_ID) || new Set();\n          const projectTasksArray = [...projectTaskSet];\n\n          // Handle cases with no project or task\n          const formattedProjectTasks = projectTasksArray.length > 0\n            ? projectTasksArray.reduce((acc, { company, task }, index) => {\n                if (index > 0 && index % 2 === 0) {\n                  acc.push(<br key={`br-${index}`} />); // Line break after every two entries\n                }\n                acc.push(\n                  <span key={index} className=\"project-task-cell\">\n                    Project: {company}, Task: {task}\n                    {index !== projectTasksArray.length - 1 ? ', ' : ''}\n                  </span>\n                );\n                return acc;\n              }, [])\n            : 'No project or task assigned';\n\n          return {\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            projectTasks: formattedProjectTasks,\n          };\n        });\n\n        setEmployeesData(processedData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"Overview-container\">\n      <h1 className=\"title\">Employee Time Sheet</h1>\n      <div className=\"EmployeeTable\">\n        {loading && !error ? (\n          <p className=\"loading-text\">Loading...</p>\n        ) : error ? (\n          <p className=\"error-text\">{error}</p>\n        ) : (\n          <div className=\"table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Employee Name</th>\n                  <th>Email</th>\n                  <th>Status</th>\n                  <th>Project and Task</th>\n                </tr>\n              </thead>\n              <tbody>\n                {employeesData.map((employee, index) => (\n                  <tr key={index}>\n                    <td>{employee.name}</td>\n                    <td>{employee.email}</td>\n                    <td>{employee.status}</td>\n                    <td>{employee.projectTasks}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}