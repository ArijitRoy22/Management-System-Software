{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport GradientPieChart from './GradientPieChart';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalEmployees, setTotalEmployees] = useState(0);\n  const [totalHours, setTotalHours] = useState({\n    hours: 0,\n    mins: 0\n  });\n  const [statusCounts, setStatusCounts] = useState({});\n  const [pagination, setPagination] = useState({\n    pageIndex: 0,\n    pageSize: 5 // Set the default page size\n  });\n  const convertToHoursAndMinutes = minutes => {\n    const hours = Math.floor(minutes / 60);\n    const mins = Math.round(minutes % 60);\n    return {\n      hours,\n      mins\n    };\n  };\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, '');\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  const calculateTotalHours = timesheetData => {\n    const totalMinutes = {\n      total: 0\n    };\n    timesheetData.forEach(entry => {\n      const [hours, minutes, seconds] = entry.hours.split(':').map(Number);\n      const totalMinutesForEntry = hours * 60 + minutes + seconds / 60;\n      totalMinutes.total += totalMinutesForEntry;\n      if (!totalMinutes[entry.User_Id]) {\n        totalMinutes[entry.User_Id] = 0;\n      }\n      totalMinutes[entry.User_Id] += totalMinutesForEntry;\n    });\n    const totalHours = convertToHoursAndMinutes(totalMinutes.total);\n    setTotalHours(totalHours);\n    return totalMinutes;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails'), axios.get('http://localhost:5001/Modules_Tasks')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n        const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n        const userProjectTaskMap = new Map();\n        timesheetData.forEach(entry => {\n          const {\n            User_Id,\n            project,\n            task\n          } = entry;\n          const company = companyDetailsData.find(company => company.company_id === project);\n          const taskDetails = moduleTaskData.find(module => module.m_slno === task);\n          if (company || taskDetails) {\n            if (!userProjectTaskMap.has(User_Id)) {\n              userProjectTaskMap.set(User_Id, {\n                projects: new Set(),\n                tasks: new Set()\n              });\n            }\n            if (company) {\n              userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n            }\n            if (taskDetails) {\n              userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n            }\n          }\n        });\n        const statusCounts = timesheetData.reduce((acc, item) => {\n          acc[item.Status] = (acc[item.Status] || 0) + 1;\n          return acc;\n        }, {});\n        setStatusCounts(statusCounts);\n        const processedData = employeeData.map(employee => {\n          var _userProjectTaskMap$g, _userProjectTaskMap$g2;\n          const projectSet = ((_userProjectTaskMap$g = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g === void 0 ? void 0 : _userProjectTaskMap$g.projects) || new Set();\n          const taskSet = ((_userProjectTaskMap$g2 = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g2 === void 0 ? void 0 : _userProjectTaskMap$g2.tasks) || new Set();\n          const formattedProjects = [...projectSet].length > 0 ? [...projectSet].join(', ') : 'No project assigned';\n          const formattedTasks = [...taskSet].length > 0 ? [...taskSet].join(', ') : 'No task assigned';\n          return {\n            id: employee.Emp_ID,\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            companyName: formattedProjects,\n            taskName: formattedTasks\n          };\n        });\n        setEmployeesData(processedData);\n        setTotalEmployees(processedData.length);\n        const totalMinutes = calculateTotalHours(timesheetData);\n        const processedDataWithHours = processedData.map(employee => ({\n          ...employee,\n          totalHours: totalMinutes[employee.id] ? convertToHoursAndMinutes(totalMinutes[employee.id]) : {\n            hours: 0,\n            mins: 0\n          }\n        }));\n        setEmployeesData(processedDataWithHours);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 100000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Define columns for Material React Table\n  const columns = useMemo(() => [{\n    accessorKey: 'name',\n    header: 'Employee Name',\n    size: 150\n  }, {\n    accessorKey: 'email',\n    header: 'Email',\n    size: 200\n  }, {\n    accessorKey: 'status',\n    header: 'Employee Status',\n    size: 150\n  }, {\n    accessorKey: 'companyName',\n    header: 'Project',\n    size: 200\n  }, {\n    accessorKey: 'taskName',\n    header: 'Task',\n    size: 200\n  }, {\n    accessorKey: 'totalHours',\n    header: 'Time',\n    size: 150,\n    Cell: ({\n      cell\n    }) => `${cell.getValue().hours} hrs ${cell.getValue().mins} mins` // Custom rendering for total hours\n  }], []);\n  const table = useMaterialReactTable({\n    columns,\n    data: employeesData,\n    state: {\n      isLoading: loading,\n      pagination\n    },\n    onPaginationChange: setPagination,\n    // Update pagination state on change\n    enableFullScreenToggle: false // Disable full-screen toggle option\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Time Sheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counts-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"EmployeeCount\",\n        children: [\"Total Number of Employees: \", totalEmployees]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"TimeCount\",\n        children: [\"Total Time: \", totalHours.hours, \" hrs \", totalHours.mins, \" mins\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(MaterialReactTable, {\n        table: table\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Status Breakdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GradientPieChart, {\n            data: Object.entries(statusCounts).map(([key, value]) => ({\n              name: key,\n              value\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Status Breakdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GradientPieChart, {\n            data: Object.entries(statusCounts).map(([key, value]) => ({\n              name: key,\n              value\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s(Overview, \"tOj8dv0kJ0yM6K9dwB/UNIvFKOo=\", false, function () {\n  return [useMaterialReactTable];\n});\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","MaterialReactTable","useMaterialReactTable","GradientPieChart","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","totalEmployees","setTotalEmployees","totalHours","setTotalHours","hours","mins","statusCounts","setStatusCounts","pagination","setPagination","pageIndex","pageSize","convertToHoursAndMinutes","minutes","Math","floor","round","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","calculateTotalHours","timesheetData","totalMinutes","total","forEach","entry","seconds","split","Number","totalMinutesForEntry","User_Id","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","moduleTaskResponse","Promise","all","get","employeeData","rawCompanyDetailsData","moduleTaskData","companyDetailsData","userProjectTaskMap","Map","project","task","company","find","company_id","taskDetails","module","m_slno","has","set","projects","Set","tasks","add","company_name","mod_name","reduce","acc","Status","processedData","employee","_userProjectTaskMap$g","_userProjectTaskMap$g2","projectSet","Emp_ID","taskSet","formattedProjects","length","join","formattedTasks","id","name","User_Fname","User_Lname","email","User_Email","status","User_Status","companyName","taskName","processedDataWithHours","interval","setInterval","clearInterval","columns","accessorKey","header","size","Cell","cell","getValue","table","state","isLoading","onPaginationChange","enableFullScreenToggle","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport {\n  MaterialReactTable,\n  useMaterialReactTable,\n} from 'material-react-table';\nimport GradientPieChart from './GradientPieChart';\nimport './Overview.css';\n\nconst Overview = () => {\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalEmployees, setTotalEmployees] = useState(0);\n  const [totalHours, setTotalHours] = useState({ hours: 0, mins: 0 });\n  const [statusCounts, setStatusCounts] = useState({});\n  const [pagination, setPagination] = useState({\n    pageIndex: 0,\n    pageSize: 5, // Set the default page size\n  });\n\n  const convertToHoursAndMinutes = (minutes) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = Math.round(minutes % 60);\n    return { hours, mins };\n  };\n\n  const cleanFieldNames = (data) => {\n    return data.map((item) => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, '');\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n\n  const calculateTotalHours = (timesheetData) => {\n    const totalMinutes = { total: 0 };\n    timesheetData.forEach((entry) => {\n      const [hours, minutes, seconds] = entry.hours.split(':').map(Number);\n      const totalMinutesForEntry = hours * 60 + minutes + seconds / 60;\n      totalMinutes.total += totalMinutesForEntry;\n      if (!totalMinutes[entry.User_Id]) {\n        totalMinutes[entry.User_Id] = 0;\n      }\n      totalMinutes[entry.User_Id] += totalMinutesForEntry;\n    });\n\n    const totalHours = convertToHoursAndMinutes(totalMinutes.total);\n    setTotalHours(totalHours);\n    return totalMinutes;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([\n          axios.get('http://localhost:5001/Employee_Data1'),\n          axios.get('http://localhost:5001/timesheet'),\n          axios.get('http://localhost:5001/CompanyDetails'),\n          axios.get('http://localhost:5001/Modules_Tasks'),\n        ]);\n\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n        const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n        const userProjectTaskMap = new Map();\n        timesheetData.forEach((entry) => {\n          const { User_Id, project, task } = entry;\n          const company = companyDetailsData.find(\n            (company) => company.company_id === project\n          );\n          const taskDetails = moduleTaskData.find(\n            (module) => module.m_slno === task\n          );\n\n          if (company || taskDetails) {\n            if (!userProjectTaskMap.has(User_Id)) {\n              userProjectTaskMap.set(User_Id, { projects: new Set(), tasks: new Set() });\n            }\n\n            if (company) {\n              userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n            }\n\n            if (taskDetails) {\n              userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n            }\n          }\n        });\n\n        const statusCounts = timesheetData.reduce((acc, item) => {\n          acc[item.Status] = (acc[item.Status] || 0) + 1;\n          return acc;\n        }, {});\n        setStatusCounts(statusCounts);\n\n        const processedData = employeeData.map((employee) => {\n          const projectSet = userProjectTaskMap.get(employee.Emp_ID)?.projects || new Set();\n          const taskSet = userProjectTaskMap.get(employee.Emp_ID)?.tasks || new Set();\n\n          const formattedProjects = [...projectSet].length > 0\n            ? [...projectSet].join(', ')\n            : 'No project assigned';\n\n          const formattedTasks = [...taskSet].length > 0\n            ? [...taskSet].join(', ')\n            : 'No task assigned';\n\n          return {\n            id: employee.Emp_ID,\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            companyName: formattedProjects,\n            taskName: formattedTasks,\n          };\n        });\n\n        setEmployeesData(processedData);\n        setTotalEmployees(processedData.length);\n\n        const totalMinutes = calculateTotalHours(timesheetData);\n        const processedDataWithHours = processedData.map((employee) => ({\n          ...employee,\n          totalHours: totalMinutes[employee.id] ? convertToHoursAndMinutes(totalMinutes[employee.id]) : { hours: 0, mins: 0 },\n        }));\n\n        setEmployeesData(processedDataWithHours);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    const interval = setInterval(fetchData, 100000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Define columns for Material React Table\n  const columns = useMemo(() => [\n    {\n      accessorKey: 'name',\n      header: 'Employee Name',\n      size: 150,\n    },\n    {\n      accessorKey: 'email',\n      header: 'Email',\n      size: 200,\n    },\n    {\n      accessorKey: 'status',\n      header: 'Employee Status',\n      size: 150,\n    },\n    {\n      accessorKey: 'companyName',\n      header: 'Project',\n      size: 200,\n    },\n    {\n      accessorKey: 'taskName',\n      header: 'Task',\n      size: 200,\n    },\n    {\n      accessorKey: 'totalHours',\n      header: 'Time',\n      size: 150,\n      Cell: ({ cell }) => `${cell.getValue().hours} hrs ${cell.getValue().mins} mins`, // Custom rendering for total hours\n    },\n  ], []);\n\n  const table = useMaterialReactTable({\n    columns,\n    data: employeesData,\n    state: { isLoading: loading, pagination },\n    onPaginationChange: setPagination, // Update pagination state on change\n    enableFullScreenToggle: false, // Disable full-screen toggle option\n  });\n\n  return (\n    <div className=\"Overview-container\">\n      <h1 className=\"title\">Employee Time Sheet</h1>\n      <div className='counts-container'>\n        <p className='EmployeeCount'>Total Number of Employees: {totalEmployees}</p>\n        <p className='TimeCount'>Total Time: {totalHours.hours} hrs {totalHours.mins} mins</p>\n      </div>\n      <div className=\"EmployeeTable\">\n        {error ? (\n          <p className=\"error-text\">{error}</p>\n        ) : (\n          <MaterialReactTable table={table} />\n        )}\n      </div>\n      <div className='final-container'>\n        <div className='chart-container'>\n          <div className='chart1'>\n            <h2>Status Breakdown</h2>\n            <GradientPieChart\n              data={Object.entries(statusCounts).map(([key, value]) => ({ name: key, value }))}\n            />\n          </div>\n        </div>\n        <div className='chart-container'>\n          <div className='chart2'>\n            <h2>Status Breakdown</h2>\n            <GradientPieChart\n              data={Object.entries(statusCounts).map(([key, value]) => ({ name: key, value }))}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}