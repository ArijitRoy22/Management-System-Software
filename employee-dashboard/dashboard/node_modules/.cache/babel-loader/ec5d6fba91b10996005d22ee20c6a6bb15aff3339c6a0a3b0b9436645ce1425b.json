{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport BarChart from './BarChart';\nimport './Project.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Project = () => {\n  _s();\n  const [projectsData, setProjectsData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [projectCounts, setProjectCounts] = useState({});\n  const [pagination, setPagination] = useState({\n    pageIndex: 0,\n    pageSize: 5\n  });\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, '');\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  const fetchData = async () => {\n    try {\n      const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails')]);\n      const employeeData = cleanFieldNames(employeeResponse.data);\n      const timesheetData = cleanFieldNames(timesheetResponse.data);\n      const companyDetailsData = cleanFieldNames(companyDetailsResponse.data);\n      const userProjectMap = new Map();\n      timesheetData.forEach(entry => {\n        const {\n          User_Id,\n          project\n        } = entry;\n        const company = companyDetailsData.find(company => company.company_id === project);\n        if (company) {\n          if (!userProjectMap.has(company.company_id)) {\n            userProjectMap.set(company.company_id, new Set());\n          }\n          userProjectMap.get(company.company_id).add(User_Id);\n        }\n      });\n      const projectCounts = {};\n      companyDetailsData.forEach(company => {\n        const employees = userProjectMap.get(company.company_id) || new Set();\n        projectCounts[company.company_name] = employees.size;\n      });\n      setProjectCounts(projectCounts);\n      const processedProjectsData = companyDetailsData.map(company => {\n        const employees = userProjectMap.get(company.company_id) || new Set();\n        const employeeList = [...employees].map(empId => {\n          var _employeeData$find, _employeeData$find2;\n          return ((_employeeData$find = employeeData.find(emp => emp.Emp_ID === empId)) === null || _employeeData$find === void 0 ? void 0 : _employeeData$find.User_Fname) + ' ' + ((_employeeData$find2 = employeeData.find(emp => emp.Emp_ID === empId)) === null || _employeeData$find2 === void 0 ? void 0 : _employeeData$find2.User_Lname);\n        }).filter(Boolean).join(', ');\n        return {\n          id: company.company_id,\n          name: company.company_name || 'N/A',\n          manager: company.client_name || 'NA',\n          employees: employeeList.length > 0 ? employeeList : 'No Employees Assigned',\n          status: company.status || 'N/A'\n        };\n      });\n\n      // Only update state if the data has changed\n      if (JSON.stringify(processedProjectsData) !== JSON.stringify(projectsData)) {\n        setProjectsData(processedProjectsData);\n      }\n    } catch (error) {\n      setError('An error occurred while fetching project data.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 2000); // Fetch data every 10 seconds\n    return () => clearInterval(interval);\n  }, [projectsData]);\n  const columns = useMemo(() => [{\n    accessorKey: 'id',\n    header: 'Project ID',\n    size: 100\n  }, {\n    accessorKey: 'name',\n    header: 'Project Name',\n    size: 150\n  }, {\n    accessorKey: 'manager',\n    header: 'Project Manager',\n    size: 150\n  }, {\n    accessorKey: 'employees',\n    header: 'Employees Working',\n    size: 150,\n    Cell: ({\n      cell\n    }) => /*#__PURE__*/_jsxDEV(\"select\", {\n      children: cell.getValue().split(', ').map((employee, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: employee,\n        children: employee\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this)\n  }, {\n    accessorKey: 'status',\n    header: 'Status',\n    size: 150\n  }], []);\n  const table = useMaterialReactTable({\n    columns,\n    data: projectsData.slice(pagination.pageIndex * pagination.pageSize, (pagination.pageIndex + 1) * pagination.pageSize),\n    state: {\n      isLoading: loading,\n      pagination: {\n        pageIndex: pagination.pageIndex,\n        pageSize: pagination.pageSize\n      }\n    },\n    rowCount: projectsData.length,\n    // Total number of projects\n    manualPagination: true,\n    // Enables manual control of pagination\n    onPaginationChange: setPagination,\n    // Update pagination state\n    pageCount: Math.ceil(projectsData.length / pagination.pageSize),\n    // Dynamically calculate page count\n    enableFullScreenToggle: false,\n    globalFilterFn: 'contains'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Project-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Projects Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ProjectTable\",\n      children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(MaterialReactTable, {\n        table: table\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ProjectBar-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Projectchart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ProjectBarchart1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Project Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n            data: Object.entries(projectCounts).map(([key, value]) => ({\n              name: key,\n              value\n            })),\n            text: \"Number of Employees\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n};\n_s(Project, \"xsD+EkBj2ycV9WVwyaNmddUfDfw=\", false, function () {\n  return [useMaterialReactTable];\n});\n_c = Project;\nexport default Project;\nvar _c;\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","MaterialReactTable","useMaterialReactTable","BarChart","jsxDEV","_jsxDEV","Project","_s","projectsData","setProjectsData","loading","setLoading","error","setError","projectCounts","setProjectCounts","pagination","setPagination","pageIndex","pageSize","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","Promise","all","get","employeeData","timesheetData","companyDetailsData","userProjectMap","Map","forEach","entry","User_Id","project","company","find","company_id","has","set","Set","add","employees","company_name","size","processedProjectsData","employeeList","empId","_employeeData$find","_employeeData$find2","emp","Emp_ID","User_Fname","User_Lname","filter","Boolean","join","id","name","manager","client_name","length","status","JSON","stringify","interval","setInterval","clearInterval","columns","accessorKey","header","Cell","cell","children","getValue","split","employee","index","fileName","_jsxFileName","lineNumber","columnNumber","table","slice","state","isLoading","rowCount","manualPagination","onPaginationChange","pageCount","Math","ceil","enableFullScreenToggle","globalFilterFn","className","text","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport {\n    MaterialReactTable,\n    useMaterialReactTable,\n} from 'material-react-table';\nimport BarChart from './BarChart'; \nimport './Project.css'\n\nconst Project = () => {\n    const [projectsData, setProjectsData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [projectCounts, setProjectCounts] = useState({});\n    const [pagination, setPagination] = useState({\n        pageIndex: 0,\n        pageSize: 5,\n    });\n\n    const cleanFieldNames = (data) => {\n        return data.map((item) => {\n            const cleanedItem = {};\n            for (const [key, value] of Object.entries(item)) {\n                const cleanedKey = key.replace(/^\\uFEFF/, '');\n                cleanedItem[cleanedKey] = value;\n            }\n            return cleanedItem;\n        });\n    };\n\n    const fetchData = async () => {\n        try {\n            const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([\n                axios.get('http://localhost:5001/Employee_Data1'),\n                axios.get('http://localhost:5001/timesheet'),\n                axios.get('http://localhost:5001/CompanyDetails'),\n            ]);\n\n            const employeeData = cleanFieldNames(employeeResponse.data);\n            const timesheetData = cleanFieldNames(timesheetResponse.data);\n            const companyDetailsData = cleanFieldNames(companyDetailsResponse.data);\n\n            const userProjectMap = new Map();\n            timesheetData.forEach((entry) => {\n                const { User_Id, project } = entry;\n                const company = companyDetailsData.find(\n                    (company) => company.company_id === project\n                );\n\n                if (company) {\n                    if (!userProjectMap.has(company.company_id)) {\n                        userProjectMap.set(company.company_id, new Set());\n                    }\n                    userProjectMap.get(company.company_id).add(User_Id);\n                }\n            });\n\n            const projectCounts = {};\n            companyDetailsData.forEach((company) => {\n                const employees = userProjectMap.get(company.company_id) || new Set();\n                projectCounts[company.company_name] = employees.size;\n            });\n\n            setProjectCounts(projectCounts);\n\n            const processedProjectsData = companyDetailsData.map((company) => {\n                const employees = userProjectMap.get(company.company_id) || new Set();\n                const employeeList = [...employees]\n                    .map((empId) => employeeData.find(emp => emp.Emp_ID === empId)?.User_Fname + ' ' + employeeData.find(emp => emp.Emp_ID === empId)?.User_Lname)\n                    .filter(Boolean)\n                    .join(', ');\n\n                return {\n                    id: company.company_id,\n                    name: company.company_name || 'N/A',\n                    manager: company.client_name || 'NA',\n                    employees: employeeList.length > 0 ? employeeList : 'No Employees Assigned',\n                    status: company.status || 'N/A',\n                };\n            });\n\n            // Only update state if the data has changed\n            if (JSON.stringify(processedProjectsData) !== JSON.stringify(projectsData)) {\n                setProjectsData(processedProjectsData);\n            }\n\n        } catch (error) {\n            setError('An error occurred while fetching project data.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n        const interval = setInterval(fetchData, 2000); // Fetch data every 10 seconds\n        return () => clearInterval(interval);\n    }, [projectsData]);\n\n    const columns = useMemo(() => [\n        {\n            accessorKey: 'id',\n            header: 'Project ID',\n            size: 100,\n        },\n        {\n            accessorKey: 'name',\n            header: 'Project Name',\n            size: 150,\n        },\n        {\n            accessorKey: 'manager',\n            header: 'Project Manager',\n            size: 150,\n        },\n        {\n            accessorKey: 'employees',\n            header: 'Employees Working',\n            size: 150,\n            Cell: ({ cell }) => (\n                <select>\n                    {cell.getValue().split(', ').map((employee, index) => (\n                        <option key={index} value={employee}>{employee}</option>\n                    ))}\n                </select>\n            ),\n        },\n        {\n            accessorKey: 'status',\n            header: 'Status',\n            size: 150,\n        },\n\n    ], []);\n\n    const table = useMaterialReactTable({\n        columns,\n        data: projectsData.slice(\n            pagination.pageIndex * pagination.pageSize,\n            (pagination.pageIndex + 1) * pagination.pageSize\n        ),\n        state: {\n            isLoading: loading,\n            pagination: {\n                pageIndex: pagination.pageIndex,\n                pageSize: pagination.pageSize,\n            },\n        },\n        rowCount: projectsData.length, // Total number of projects\n        manualPagination: true, // Enables manual control of pagination\n        onPaginationChange: setPagination, // Update pagination state\n        pageCount: Math.ceil(projectsData.length / pagination.pageSize), // Dynamically calculate page count\n        enableFullScreenToggle: false,\n        globalFilterFn: 'contains',\n    });\n\n    return (\n        <div className=\"Project-container\">\n            <h1 className=\"title\">Projects Overview</h1>\n            <div className=\"ProjectTable\">\n                {error ? (\n                    <p className=\"error-text\">{error}</p>\n                ) : (\n                    <MaterialReactTable table={table} />\n                )}\n            </div>\n            <div className=\"ProjectBar-container\">\n                <div className=\"Projectchart-container\">\n                    <div className=\"ProjectBarchart1\">\n                        <h2>Project Distribution</h2>\n                        <BarChart\n                            data={Object.entries(projectCounts).map(([key, value]) => ({ name: key, value}))}\n                            text='Number of Employees'\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Project;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}