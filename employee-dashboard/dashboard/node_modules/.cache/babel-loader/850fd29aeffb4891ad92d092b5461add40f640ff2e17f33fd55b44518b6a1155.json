{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  useEffect(() => {\n    const fetchEmployeeData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n        // Create a user-project-company mapping\n        const userProjectCompanyMap = new Map();\n        timesheetData.forEach(entry => {\n          const {\n            User_Id,\n            project\n          } = entry;\n          const matchingCompany = companyDetailsData.find(company => company.company_id === project);\n          const companyName = matchingCompany ? matchingCompany.company_name : 'No Company Assigned';\n          const userProjectKey = `${User_Id}-${project}`;\n          if (!userProjectCompanyMap.has(userProjectKey)) {\n            userProjectCompanyMap.set(userProjectKey, companyName);\n\n            // Find matching employee by comparing User_Id with emp_id\n            const matchingEmployee = employeeData.find(employee => employee.Emp_ID === User_Id);\n            if (matchingEmployee) {\n              const firstName = matchingEmployee.User_Fname;\n              const lastName = matchingEmployee.User_Lname;\n\n              // Log the information to the console\n              console.log(`User_Id: ${User_Id}, Project: ${project}, Company_Name: ${companyName}, First_Name: ${firstName}, Last_Name: ${lastName}`);\n            } else {\n              console.log(`User_Id: ${User_Id}, Project: ${project}, Company_Name: ${companyName}, No matching employee found`);\n            }\n          }\n        });\n\n        // Process employee data for display (if needed in the future)\n        const processedData = employeeData.map(employee => ({\n          name: employee.User_Fname + \" \" + employee.User_Lname || 'N/A',\n          email: employee.User_Email || 'N/A',\n          status: employee.User_Status || 'N/A'\n        }));\n        setEmployeesData(processedData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchEmployeeData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Employees Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), loading && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Employee Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: employeesData.map((employee, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: employee.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n_s(Overview, \"55THOB/m7eZcGNdMGjyDf1FNpOg=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","fetchEmployeeData","employeeResponse","timesheetResponse","companyDetailsResponse","Promise","all","get","employeeData","timesheetData","rawCompanyDetailsData","companyDetailsData","userProjectCompanyMap","Map","forEach","entry","User_Id","project","matchingCompany","find","company","company_id","companyName","company_name","userProjectKey","has","set","matchingEmployee","employee","Emp_ID","firstName","User_Fname","lastName","User_Lname","console","log","processedData","name","email","User_Email","status","User_Status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\n\nconst Overview = () => {\n    const [employeesData, setEmployeesData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const cleanFieldNames = (data) => {\n        return data.map(item => {\n            const cleanedItem = {};\n            for (const [key, value] of Object.entries(item)) {\n                const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n                cleanedItem[cleanedKey] = value;\n            }\n            return cleanedItem;\n        });\n    };\n\n    useEffect(() => {\n        const fetchEmployeeData = async () => {\n            try {\n                const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([\n                    axios.get('http://localhost:5001/Employee_Data1'),\n                    axios.get('http://localhost:5001/timesheet'),\n                    axios.get('http://localhost:5001/CompanyDetails'),\n                ]);\n\n                const employeeData = employeeResponse.data;\n                const timesheetData = timesheetResponse.data;\n                const rawCompanyDetailsData = companyDetailsResponse.data;\n\n                const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n                // Create a user-project-company mapping\n                const userProjectCompanyMap = new Map();\n\n                timesheetData.forEach((entry) => {\n                    const { User_Id, project } = entry;\n                    const matchingCompany = companyDetailsData.find(company => company.company_id === project);\n                    const companyName = matchingCompany ? matchingCompany.company_name : 'No Company Assigned';\n\n                    const userProjectKey = `${User_Id}-${project}`;\n\n                    if (!userProjectCompanyMap.has(userProjectKey)) {\n                        userProjectCompanyMap.set(userProjectKey, companyName);\n\n                        // Find matching employee by comparing User_Id with emp_id\n                        const matchingEmployee = employeeData.find(employee => employee.Emp_ID === User_Id);\n\n                        if (matchingEmployee) {\n                            const firstName = matchingEmployee.User_Fname;\n                            const lastName = matchingEmployee.User_Lname;\n\n                            // Log the information to the console\n                            console.log(`User_Id: ${User_Id}, Project: ${project}, Company_Name: ${companyName}, First_Name: ${firstName}, Last_Name: ${lastName}`);\n                        } else {\n                            console.log(`User_Id: ${User_Id}, Project: ${project}, Company_Name: ${companyName}, No matching employee found`);\n                        }\n                    }\n                });\n\n                // Process employee data for display (if needed in the future)\n                const processedData = employeeData.map((employee) => ({\n                    name: employee.User_Fname + \" \" + employee.User_Lname || 'N/A',\n                    email: employee.User_Email || 'N/A',\n                    status: employee.User_Status || 'N/A',\n                }));\n\n                setEmployeesData(processedData);\n            } catch (error) {\n                setError('An error occurred while fetching employee data.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchEmployeeData();\n    }, []);\n\n    return (\n        <div className=\"Overview-container\">\n            <h1 className=\"title\">Employee Details</h1>\n            <div className=\"EmployeeTable\">\n                <h2>Employees Details</h2>\n                {loading && !error ? (\n                    <p>Loading...</p>\n                ) : error ? (\n                    <p>{error}</p>\n                ) : (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Employee Name</th>\n                                <th>Email</th>\n                                <th>Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {employeesData.map((employee, index) => (\n                                <tr key={index}>\n                                    <td>{employee.name}</td>\n                                    <td>{employee.email}</td>\n                                    <td>{employee.status}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}