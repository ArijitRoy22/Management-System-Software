{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n\n  // Function to parse and calculate total hours\n  const calculateTotalHours = timesheetData => {\n    const totalMinutes = {\n      total: 0\n    };\n    timesheetData.forEach(entry => {\n      const [hours, minutes, seconds] = entry.hours.split(':').map(Number);\n      const totalMinutesForEntry = hours * 60 + minutes + seconds / 60;\n\n      // Sum up total minutes for all entries\n      totalMinutes.total += totalMinutesForEntry;\n\n      // Sum up minutes per User_Id\n      if (!totalMinutes[entry.User_Id]) {\n        totalMinutes[entry.User_Id] = 0;\n      }\n      totalMinutes[entry.User_Id] += totalMinutesForEntry;\n    });\n\n    // Convert total minutes back to hours and minutes\n    const convertToHoursAndMinutes = minutes => {\n      const hours = Math.floor(minutes / 60);\n      const mins = Math.round(minutes % 60);\n      return {\n        hours,\n        mins\n      };\n    };\n\n    // Display the total hours and the total per User_Id in the console\n    console.log('Total hours across all entries:', convertToHoursAndMinutes(totalMinutes.total));\n    Object.keys(totalMinutes).forEach(key => {\n      if (key !== 'total') {\n        console.log(`Total hours for ${key}:`, convertToHoursAndMinutes(totalMinutes[key]));\n      }\n    });\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails'), axios.get('http://localhost:5001/Modules_Tasks')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n        const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n\n        // Clean the company details data\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n        // Process unique user_id, project, and task pairs\n        const userProjectTaskMap = new Map();\n        timesheetData.forEach(entry => {\n          const {\n            User_Id,\n            project,\n            task\n          } = entry;\n          const company = companyDetailsData.find(company => company.company_id === project);\n          const taskDetails = moduleTaskData.find(module => module.m_slno === task);\n          if (company || taskDetails) {\n            if (!userProjectTaskMap.has(User_Id)) {\n              userProjectTaskMap.set(User_Id, {\n                projects: new Set(),\n                tasks: new Set()\n              });\n            }\n            if (company) {\n              userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n            }\n            if (taskDetails) {\n              userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n            }\n          }\n        });\n\n        // Process employee data for display in table\n        const processedData = employeeData.map(employee => {\n          var _userProjectTaskMap$g, _userProjectTaskMap$g2;\n          const projectSet = ((_userProjectTaskMap$g = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g === void 0 ? void 0 : _userProjectTaskMap$g.projects) || new Set();\n          const taskSet = ((_userProjectTaskMap$g2 = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g2 === void 0 ? void 0 : _userProjectTaskMap$g2.tasks) || new Set();\n          const formattedProjects = [...projectSet].length > 0 ? [...projectSet].join(', ') : 'No project assigned';\n          const formattedTasks = [...taskSet].length > 0 ? [...taskSet].join(', ') : 'No task assigned';\n          return {\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            companyName: formattedProjects,\n            taskName: formattedTasks\n          };\n        });\n        setEmployeesData(processedData);\n\n        // Calculate and print total hours\n        calculateTotalHours(timesheetData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Time Sheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counts-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"EmployeeCount\",\n        children: \"Total Number of Employees:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"TimeCount1\",\n        children: \"Total Time:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: loading && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading-text\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Employee Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Task\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: employeesData.map((employee, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.companyName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: employee.taskName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n};\n_s(Overview, \"55THOB/m7eZcGNdMGjyDf1FNpOg=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","calculateTotalHours","timesheetData","totalMinutes","total","forEach","entry","hours","minutes","seconds","split","Number","totalMinutesForEntry","User_Id","convertToHoursAndMinutes","Math","floor","mins","round","console","log","keys","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","moduleTaskResponse","Promise","all","get","employeeData","rawCompanyDetailsData","moduleTaskData","companyDetailsData","userProjectTaskMap","Map","project","task","company","find","company_id","taskDetails","module","m_slno","has","set","projects","Set","tasks","add","company_name","mod_name","processedData","employee","_userProjectTaskMap$g","_userProjectTaskMap$g2","projectSet","Emp_ID","taskSet","formattedProjects","length","join","formattedTasks","name","User_Fname","User_Lname","email","User_Email","status","User_Status","companyName","taskName","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\n\nconst Overview = () => {\n    const [employeesData, setEmployeesData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const cleanFieldNames = (data) => {\n        return data.map((item) => {\n            const cleanedItem = {};\n            for (const [key, value] of Object.entries(item)) {\n                const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n                cleanedItem[cleanedKey] = value;\n            }\n            return cleanedItem;\n        });\n    };\n\n    // Function to parse and calculate total hours\n    const calculateTotalHours = (timesheetData) => {\n        const totalMinutes = { total: 0 };\n        timesheetData.forEach((entry) => {\n            const [hours, minutes, seconds] = entry.hours.split(':').map(Number);\n            const totalMinutesForEntry = hours * 60 + minutes + seconds / 60;\n\n            // Sum up total minutes for all entries\n            totalMinutes.total += totalMinutesForEntry;\n\n            // Sum up minutes per User_Id\n            if (!totalMinutes[entry.User_Id]) {\n                totalMinutes[entry.User_Id] = 0;\n            }\n            totalMinutes[entry.User_Id] += totalMinutesForEntry;\n        });\n\n        // Convert total minutes back to hours and minutes\n        const convertToHoursAndMinutes = (minutes) => {\n            const hours = Math.floor(minutes / 60);\n            const mins = Math.round(minutes % 60);\n            return { hours, mins };\n        };\n\n        // Display the total hours and the total per User_Id in the console\n        console.log('Total hours across all entries:', convertToHoursAndMinutes(totalMinutes.total));\n        Object.keys(totalMinutes).forEach((key) => {\n            if (key !== 'total') {\n                console.log(`Total hours for ${key}:`, convertToHoursAndMinutes(totalMinutes[key]));\n            }\n        });\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([\n                    axios.get('http://localhost:5001/Employee_Data1'),\n                    axios.get('http://localhost:5001/timesheet'),\n                    axios.get('http://localhost:5001/CompanyDetails'),\n                    axios.get('http://localhost:5001/Modules_Tasks'),\n                ]);\n\n                const employeeData = employeeResponse.data;\n                const timesheetData = timesheetResponse.data;\n                const rawCompanyDetailsData = companyDetailsResponse.data;\n                const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n\n                // Clean the company details data\n                const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n                // Process unique user_id, project, and task pairs\n                const userProjectTaskMap = new Map();\n                timesheetData.forEach((entry) => {\n                    const { User_Id, project, task } = entry;\n                    const company = companyDetailsData.find(\n                        (company) => company.company_id === project\n                    );\n\n                    const taskDetails = moduleTaskData.find(\n                        (module) => module.m_slno === task\n                    );\n\n                    if (company || taskDetails) {\n                        if (!userProjectTaskMap.has(User_Id)) {\n                            userProjectTaskMap.set(User_Id, { projects: new Set(), tasks: new Set() });\n                        }\n\n                        if (company) {\n                            userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n                        }\n\n                        if (taskDetails) {\n                            userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n                        }\n                    }\n                });\n\n                // Process employee data for display in table\n                const processedData = employeeData.map((employee) => {\n                    const projectSet = userProjectTaskMap.get(employee.Emp_ID)?.projects || new Set();\n                    const taskSet = userProjectTaskMap.get(employee.Emp_ID)?.tasks || new Set();\n\n                    const formattedProjects = [...projectSet].length > 0\n                        ? [...projectSet].join(', ')\n                        : 'No project assigned';\n\n                    const formattedTasks = [...taskSet].length > 0\n                        ? [...taskSet].join(', ')\n                        : 'No task assigned';\n\n                    return {\n                        name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n                        email: employee.User_Email || 'N/A',\n                        status: employee.User_Status || 'N/A',\n                        companyName: formattedProjects,\n                        taskName: formattedTasks,\n                    };\n                });\n\n                setEmployeesData(processedData);\n\n                // Calculate and print total hours\n                calculateTotalHours(timesheetData);\n\n            } catch (error) {\n                setError('An error occurred while fetching employee data.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n        const interval = setInterval(fetchData, 2000);\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div className=\"Overview-container\">\n            <h1 className=\"title\">Employee Time Sheet</h1>\n            <div className='counts-container'>\n                <p className='EmployeeCount'>Total Number of Employees:</p>\n                <p className='TimeCount1'>Total Time:</p>\n            </div>\n            <div className=\"EmployeeTable\">\n                {loading && !error ? (\n                    <p className=\"loading-text\">Loading...</p>\n                ) : error ? (\n                    <p className=\"error-text\">{error}</p>\n                ) : (\n                    <div className=\"table-container\">\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>Employee Name</th>\n                                    <th>Email</th>\n                                    <th>Status</th>\n                                    <th>Project</th>\n                                    <th>Task</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {employeesData.map((employee, index) => (\n                                    <tr key={index}>\n                                        <td>{employee.name}</td>\n                                        <td>{employee.email}</td>\n                                        <td>{employee.status}</td>\n                                        <td>{employee.companyName}</td>\n                                        <td>{employee.taskName}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}