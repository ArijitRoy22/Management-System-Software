{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchEmployeeData = async () => {\n      try {\n        // Fetch data from the APIs\n        const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const companyDetailsData = companyDetailsResponse.data;\n\n        // Create a map for project IDs to company names\n        const projectToCompanyMap = companyDetailsData.reduce((acc, company) => {\n          const companyId = company.company_id;\n          const companyName = company.company_name;\n          if (companyId && companyName) {\n            // Assume project ID in timesheet matches company_id here\n            acc[companyId] = companyName;\n          } else {\n            console.warn(`Missing company_id or company_name in company data:`, company);\n          }\n          return acc;\n        }, {});\n\n        // Create a map of unique User_Id and Project pairs with company names\n        const uniqueUserProjects = new Set();\n        timesheetData.forEach(entry => {\n          const userId = entry.User_Id;\n          const projectId = entry.project;\n          const companyName = projectToCompanyMap[projectId] || 'Unknown Company';\n          if (userId && projectId) {\n            uniqueUserProjects.add(`${userId}, ${projectId}, ${companyName}`);\n          }\n        });\n\n        // Log the unique User_Id and Project pairs with company names\n        console.log(\"Unique User_Id and Project with Company_name:\");\n        uniqueUserProjects.forEach(entry => console.log(entry));\n\n        // If you need to display this data in the UI or process it further, do it here\n        // Example: setEmployeesData(processedData);\n      } catch (error) {\n        setError('An error occurred while fetching data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchEmployeeData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Employees Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), loading && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Your existing table code here if needed\n      _jsxDEV(\"p\", {\n        children: \"Check the console for unique User_Id and Project with Company_name.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Overview, \"55THOB/m7eZcGNdMGjyDf1FNpOg=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","fetchEmployeeData","employeeResponse","timesheetResponse","companyDetailsResponse","Promise","all","get","employeeData","data","timesheetData","companyDetailsData","projectToCompanyMap","reduce","acc","company","companyId","company_id","companyName","company_name","console","warn","uniqueUserProjects","Set","forEach","entry","userId","User_Id","projectId","project","add","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Overview.css';\n\nconst Overview = () => {\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchEmployeeData = async () => {\n      try {\n        // Fetch data from the APIs\n        const [employeeResponse, timesheetResponse, companyDetailsResponse] = await Promise.all([\n          axios.get('http://localhost:5001/Employee_Data1'),\n          axios.get('http://localhost:5001/timesheet'),\n          axios.get('http://localhost:5001/CompanyDetails'),\n        ]);\n\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const companyDetailsData = companyDetailsResponse.data;\n\n        // Create a map for project IDs to company names\n        const projectToCompanyMap = companyDetailsData.reduce((acc, company) => {\n          const companyId = company.company_id;\n          const companyName = company.company_name;\n\n          if (companyId && companyName) {\n            // Assume project ID in timesheet matches company_id here\n            acc[companyId] = companyName;\n          } else {\n            console.warn(`Missing company_id or company_name in company data:`, company);\n          }\n\n          return acc;\n        }, {});\n\n        // Create a map of unique User_Id and Project pairs with company names\n        const uniqueUserProjects = new Set();\n        \n        timesheetData.forEach((entry) => {\n          const userId = entry.User_Id;\n          const projectId = entry.project;\n          const companyName = projectToCompanyMap[projectId] || 'Unknown Company';\n\n          if (userId && projectId) {\n            uniqueUserProjects.add(`${userId}, ${projectId}, ${companyName}`);\n          }\n        });\n\n        // Log the unique User_Id and Project pairs with company names\n        console.log(\"Unique User_Id and Project with Company_name:\");\n        uniqueUserProjects.forEach((entry) => console.log(entry));\n\n        // If you need to display this data in the UI or process it further, do it here\n        // Example: setEmployeesData(processedData);\n\n      } catch (error) {\n        setError('An error occurred while fetching data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchEmployeeData();\n  }, []);\n\n  return (\n    <div className=\"Overview-container\">\n      <h1 className=\"title\">Employee Details</h1>\n      <div className=\"EmployeeTable\">\n        <h2>Employees Details</h2>\n        {loading && !error ? (\n          <p>Loading...</p>\n        ) : error ? (\n          <p>{error}</p>\n        ) : (\n          // Your existing table code here if needed\n          <p>Check the console for unique User_Id and Project with Company_name.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}