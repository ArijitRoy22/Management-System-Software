{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/LineChart.js\";\nimport React from 'react';\nimport Chart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst convertToHoursAndMinutes = minutes => {\n  const hours = Math.floor(minutes / 60);\n  const mins = minutes % 60;\n  return `${hours} hours ${mins} minutes`;\n};\nconst convertToHoursAndMinutes1 = minutes => {\n  const hours = Math.floor(minutes / 60);\n  return `${hours} hours`;\n};\nconst aggregateDailyHours = data => {\n  const dailyTotal = data.reduce((acc, item) => {\n    const date = item.date;\n    const value = item.value;\n    if (!acc[date]) {\n      acc[date] = 0;\n    }\n    acc[date] += value;\n    return acc;\n  }, {});\n  return Object.entries(dailyTotal).map(([date, value]) => ({\n    date,\n    value\n  }));\n};\nconst LineChart = ({\n  data,\n  totalData,\n  title,\n  xaxisTitle,\n  yaxisTitle,\n  showTotalPoint,\n  isDefault\n}) => {\n  const aggregatedData = aggregateDailyHours(data);\n  const uniqueDates = [...new Set(aggregatedData.map(item => item.date))];\n  const chartOptions = {\n    chart: {\n      type: 'line'\n    },\n    xaxis: {\n      categories: uniqueDates,\n      title: {\n        text: xaxisTitle\n      }\n    },\n    yaxis: {\n      title: {\n        text: yaxisTitle\n      },\n      labels: {\n        formatter: value => convertToHoursAndMinutes1(value)\n      }\n    },\n    title: {\n      text: title\n    },\n    stroke: {\n      curve: 'smooth'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    markers: {\n      size: 5,\n      colors: ['#FF4560', '#00E396']\n    },\n    series: [{\n      name: 'Daily Time',\n      data: uniqueDates.map(date => {\n        const entry = aggregatedData.find(item => item.date === date);\n        return entry ? entry.value : 0;\n      }),\n      color: '#FF4560'\n    }],\n    tooltip: {\n      y: {\n        formatter: value => convertToHoursAndMinutes(value)\n      }\n    }\n  };\n\n  // Handle case for default filter type\n  if (isDefault) {\n    const uniqueMonths = [...new Set(data.map(item => item.date && item.date.substring(0, 7)))].filter(month => month);\n    chartOptions.xaxis.categories = uniqueMonths;\n    chartOptions.series = [{\n      name: 'Total Time',\n      data: totalData.map(item => item.value),\n      color: '#00E396'\n    }];\n    delete chartOptions.series[0]; // Remove Daily Time series for default filter\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: chartOptions,\n      series: chartOptions.series,\n      type: \"line\",\n      height: \"350\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","Chart","jsxDEV","_jsxDEV","convertToHoursAndMinutes","minutes","hours","Math","floor","mins","convertToHoursAndMinutes1","aggregateDailyHours","data","dailyTotal","reduce","acc","item","date","value","Object","entries","map","LineChart","totalData","title","xaxisTitle","yaxisTitle","showTotalPoint","isDefault","aggregatedData","uniqueDates","Set","chartOptions","chart","type","xaxis","categories","text","yaxis","labels","formatter","stroke","curve","dataLabels","enabled","markers","size","colors","series","name","entry","find","color","tooltip","y","uniqueMonths","substring","filter","month","children","options","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/LineChart.js"],"sourcesContent":["import React from 'react';\nimport Chart from 'react-apexcharts';\n\nconst convertToHoursAndMinutes = (minutes) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours} hours ${mins} minutes`;\n};\n\nconst convertToHoursAndMinutes1 = (minutes) => {\n    const hours = Math.floor(minutes / 60);\n    return `${hours} hours`;\n};\n\nconst aggregateDailyHours = (data) => {\n    const dailyTotal = data.reduce((acc, item) => {\n        const date = item.date;\n        const value = item.value;\n\n        if (!acc[date]) {\n            acc[date] = 0;\n        }\n        acc[date] += value;\n        return acc;\n    }, {});\n\n    return Object.entries(dailyTotal).map(([date, value]) => ({\n        date,\n        value\n    }));\n};\n\nconst LineChart = ({ data, totalData, title, xaxisTitle, yaxisTitle, showTotalPoint, isDefault }) => {\n    const aggregatedData = aggregateDailyHours(data);\n    const uniqueDates = [...new Set(aggregatedData.map(item => item.date))];\n\n    const chartOptions = {\n        chart: {\n            type: 'line'\n        },\n        xaxis: {\n            categories: uniqueDates,\n            title: {\n                text: xaxisTitle\n            }\n        },\n        yaxis: {\n            title: {\n                text: yaxisTitle\n            },\n            labels: {\n                formatter: (value) => convertToHoursAndMinutes1(value)\n            }\n        },\n        title: {\n            text: title\n        },\n        stroke: {\n            curve: 'smooth'\n        },\n        dataLabels: {\n            enabled: false\n        },\n        markers: {\n            size: 5,\n            colors: ['#FF4560', '#00E396']\n        },\n        series: [\n            {\n                name: 'Daily Time',\n                data: uniqueDates.map(date => {\n                    const entry = aggregatedData.find(item => item.date === date);\n                    return entry ? entry.value : 0;\n                }),\n                color: '#FF4560'\n            },\n        ],\n        tooltip: {\n            y: {\n                formatter: (value) => convertToHoursAndMinutes(value)\n            }\n        }\n    };\n\n    // Handle case for default filter type\n    if (isDefault) {\n        const uniqueMonths = [...new Set(data.map(item => item.date && item.date.substring(0, 7)))].filter(month => month);\n        chartOptions.xaxis.categories = uniqueMonths;\n        chartOptions.series = [\n            {\n                name: 'Total Time',\n                data: totalData.map(item => item.value),\n                color: '#00E396'\n            }\n        ];\n        delete chartOptions.series[0]; // Remove Daily Time series for default filter\n    }\n\n    return (\n        <div>\n            <Chart options={chartOptions} series={chartOptions.series} type=\"line\" height=\"350\" />\n        </div>\n    );\n};\n\nexport default LineChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}