{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { MaterialReactTable, useMaterialReactTable } from 'material-react-table';\nimport BarChart from './BarChart';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalEmployees, setTotalEmployees] = useState(0);\n  const [totalHours, setTotalHours] = useState({\n    hours: 0,\n    mins: 0\n  });\n  const [statusCounts, setStatusCounts] = useState({});\n  const [projectCounts, setProjectCounts] = useState({});\n  const [pagination, setPagination] = useState({\n    pageIndex: 0,\n    pageSize: 5 // Set the default page size\n  });\n  const convertToHoursAndMinutes = minutes => {\n    const hours = Math.floor(minutes / 60);\n    const mins = Math.round(minutes % 60);\n    return {\n      hours,\n      mins\n    };\n  };\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, '');\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  const calculateTotalHours = timesheetData => {\n    const totalMinutes = {\n      total: 0\n    };\n    timesheetData.forEach(entry => {\n      const [hours, minutes, seconds] = entry.hours.split(':').map(Number);\n      const totalMinutesForEntry = hours * 60 + minutes + seconds / 60;\n      totalMinutes.total += totalMinutesForEntry;\n      if (!totalMinutes[entry.User_Id]) {\n        totalMinutes[entry.User_Id] = 0;\n      }\n      totalMinutes[entry.User_Id] += totalMinutesForEntry;\n    });\n    const totalHours = convertToHoursAndMinutes(totalMinutes.total);\n    setTotalHours(totalHours);\n    return totalMinutes;\n  };\n  const fetchData = async () => {\n    try {\n      const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails'), axios.get('http://localhost:5001/Modules_Tasks')]);\n      const employeeData = employeeResponse.data;\n      const timesheetData = timesheetResponse.data;\n      const rawCompanyDetailsData = companyDetailsResponse.data;\n      const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n      const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n      const userProjectTaskMap = new Map();\n      timesheetData.forEach(entry => {\n        const {\n          User_Id,\n          project,\n          task\n        } = entry;\n        const company = companyDetailsData.find(company => company.company_id === project);\n        const taskDetails = moduleTaskData.find(module => module.m_slno === task);\n        if (company || taskDetails) {\n          if (!userProjectTaskMap.has(User_Id)) {\n            userProjectTaskMap.set(User_Id, {\n              projects: new Set(),\n              tasks: new Set()\n            });\n          }\n          if (company) {\n            userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n          }\n          if (taskDetails) {\n            userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n          }\n        }\n      });\n      const statusCounts = timesheetData.reduce((acc, item) => {\n        acc[item.Status] = (acc[item.Status] || 0) + 1;\n        return acc;\n      }, {});\n      setStatusCounts(statusCounts);\n\n      //   const projectCounts = calculateProjectCounts(userProjectTaskMap);\n      //   setProjectCounts(projectCounts);\n\n      const projectCounts = {};\n      employeeData.forEach(employee => {\n        var _userProjectTaskMap$g;\n        const projects = ((_userProjectTaskMap$g = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g === void 0 ? void 0 : _userProjectTaskMap$g.projects) || new Set();\n        projects.forEach(project => {\n          if (!projectCounts[project]) {\n            projectCounts[project] = 0;\n          }\n          projectCounts[project] += 1; // Increment the count for each project the employee is working on\n        });\n      });\n      setProjectCounts(projectCounts);\n      const processedData = employeeData.map(employee => {\n        var _userProjectTaskMap$g2, _userProjectTaskMap$g3;\n        const projectSet = ((_userProjectTaskMap$g2 = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g2 === void 0 ? void 0 : _userProjectTaskMap$g2.projects) || new Set();\n        const taskSet = ((_userProjectTaskMap$g3 = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g3 === void 0 ? void 0 : _userProjectTaskMap$g3.tasks) || new Set();\n        const formattedProjects = [...projectSet].length > 0 ? [...projectSet].join(', ') : 'No project assigned';\n        const formattedTasks = [...taskSet].length > 0 ? [...taskSet].join(', ') : 'No task assigned';\n        return {\n          id: employee.Emp_ID,\n          name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n          email: employee.User_Email || 'N/A',\n          status: employee.User_Status || 'N/A',\n          companyName: formattedProjects,\n          taskName: formattedTasks\n        };\n      });\n\n      // const customSearchFunction = (rows, searchText) => {\n      //     return rows.filter((row) => {\n      //       // Convert both row name and search text to lowercase to ensure case-insensitive matching\n      //       const fullName = row.original.name.toLowerCase();\n      //       const query = searchText.toLowerCase();\n\n      //       // Return rows where the name contains the exact search text\n      //       return fullName.includes(query);\n      //     });\n      //   };\n\n      const totalMinutes = calculateTotalHours(timesheetData);\n      const processedDataWithHours = processedData.map(employee => ({\n        ...employee,\n        totalHours: totalMinutes[employee.id] ? convertToHoursAndMinutes(totalMinutes[employee.id]) : {\n          hours: 0,\n          mins: 0\n        }\n      }));\n\n      // Only update state if data has changed\n      if (JSON.stringify(processedDataWithHours) !== JSON.stringify(employeesData)) {\n        setEmployeesData(processedDataWithHours);\n        setTotalEmployees(processedDataWithHours.length);\n      }\n    } catch (error) {\n      setError('An error occurred while fetching employee data.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 2000); // You can adjust the interval as needed\n    return () => clearInterval(interval);\n  }, [employeesData]); // Add employeesData to dependency array\n\n  // Define columns for Material React Table\n  const columns = useMemo(() => [{\n    accessorKey: 'name',\n    header: 'Employee Name',\n    size: 150\n  }, {\n    accessorKey: 'email',\n    header: 'Email',\n    size: 200\n  }, {\n    accessorKey: 'status',\n    header: 'Employee Status',\n    size: 150\n  }, {\n    accessorKey: 'companyName',\n    header: 'Project',\n    size: 200\n  }, {\n    accessorKey: 'taskName',\n    header: 'Task',\n    size: 200\n  }, {\n    accessorKey: 'totalHours',\n    header: 'Time',\n    size: 150,\n    Cell: ({\n      cell\n    }) => `${cell.getValue().hours} hrs ${cell.getValue().mins} mins`\n  }], []);\n  const table = useMaterialReactTable({\n    columns,\n    data: employeesData,\n    state: {\n      isLoading: loading,\n      pagination\n    },\n    onPaginationChange: setPagination,\n    enableFullScreenToggle: false,\n    globalFilterFn: 'contains'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Time Sheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counts-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"EmployeeCount\",\n        children: [\"Total Number of Employees: \", totalEmployees]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"TimeCount\",\n        children: [\"Total Time: \", totalHours.hours, \" hrs \", totalHours.mins, \" mins\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(MaterialReactTable, {\n        table: table\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart1\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Status Breakdown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n          data: Object.entries(statusCounts).map(([key, value]) => ({\n            name: key,\n            value\n          })),\n          title: \"Employee Status Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart2\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Projects Breakdown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n          data: Object.entries(projectCounts).map(([key, value]) => ({\n            name: key,\n            value\n          })),\n          title: \"Projects Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 9\n  }, this);\n};\n_s(Overview, \"kq5ZZR4XkOY5xotybt5cOH696xk=\", false, function () {\n  return [useMaterialReactTable];\n});\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","MaterialReactTable","useMaterialReactTable","BarChart","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","totalEmployees","setTotalEmployees","totalHours","setTotalHours","hours","mins","statusCounts","setStatusCounts","projectCounts","setProjectCounts","pagination","setPagination","pageIndex","pageSize","convertToHoursAndMinutes","minutes","Math","floor","round","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","calculateTotalHours","timesheetData","totalMinutes","total","forEach","entry","seconds","split","Number","totalMinutesForEntry","User_Id","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","moduleTaskResponse","Promise","all","get","employeeData","rawCompanyDetailsData","moduleTaskData","companyDetailsData","userProjectTaskMap","Map","project","task","company","find","company_id","taskDetails","module","m_slno","has","set","projects","Set","tasks","add","company_name","mod_name","reduce","acc","Status","employee","_userProjectTaskMap$g","Emp_ID","processedData","_userProjectTaskMap$g2","_userProjectTaskMap$g3","projectSet","taskSet","formattedProjects","length","join","formattedTasks","id","name","User_Fname","User_Lname","email","User_Email","status","User_Status","companyName","taskName","processedDataWithHours","JSON","stringify","interval","setInterval","clearInterval","columns","accessorKey","header","size","Cell","cell","getValue","table","state","isLoading","onPaginationChange","enableFullScreenToggle","globalFilterFn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport {\n    MaterialReactTable,\n    useMaterialReactTable,\n} from 'material-react-table';\nimport BarChart from './BarChart';\nimport './Overview.css';\n\nconst Overview = () => {\n    const [employeesData, setEmployeesData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [totalEmployees, setTotalEmployees] = useState(0);\n    const [totalHours, setTotalHours] = useState({ hours: 0, mins: 0 });\n    const [statusCounts, setStatusCounts] = useState({});\n    const [projectCounts, setProjectCounts] = useState({});\n    const [pagination, setPagination] = useState({\n        pageIndex: 0,\n        pageSize: 5, // Set the default page size\n    });\n\n    const convertToHoursAndMinutes = (minutes) => {\n        const hours = Math.floor(minutes / 60);\n        const mins = Math.round(minutes % 60);\n        return { hours, mins };\n    };\n\n    const cleanFieldNames = (data) => {\n        return data.map((item) => {\n            const cleanedItem = {};\n            for (const [key, value] of Object.entries(item)) {\n                const cleanedKey = key.replace(/^\\uFEFF/, '');\n                cleanedItem[cleanedKey] = value;\n            }\n            return cleanedItem;\n        });\n    };\n\n    const calculateTotalHours = (timesheetData) => {\n        const totalMinutes = { total: 0 };\n        timesheetData.forEach((entry) => {\n            const [hours, minutes, seconds] = entry.hours.split(':').map(Number);\n            const totalMinutesForEntry = hours * 60 + minutes + seconds / 60;\n            totalMinutes.total += totalMinutesForEntry;\n            if (!totalMinutes[entry.User_Id]) {\n                totalMinutes[entry.User_Id] = 0;\n            }\n            totalMinutes[entry.User_Id] += totalMinutesForEntry;\n        });\n\n        const totalHours = convertToHoursAndMinutes(totalMinutes.total);\n        setTotalHours(totalHours);\n        return totalMinutes;\n    };\n\n    const fetchData = async () => {\n        try {\n            const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([\n                axios.get('http://localhost:5001/Employee_Data1'),\n                axios.get('http://localhost:5001/timesheet'),\n                axios.get('http://localhost:5001/CompanyDetails'),\n                axios.get('http://localhost:5001/Modules_Tasks'),\n            ]);\n\n            const employeeData = employeeResponse.data;\n            const timesheetData = timesheetResponse.data;\n            const rawCompanyDetailsData = companyDetailsResponse.data;\n            const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n            const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n            const userProjectTaskMap = new Map();\n            timesheetData.forEach((entry) => {\n                const { User_Id, project, task } = entry;\n                const company = companyDetailsData.find(\n                    (company) => company.company_id === project\n                );\n                const taskDetails = moduleTaskData.find(\n                    (module) => module.m_slno === task\n                );\n\n                if (company || taskDetails) {\n                    if (!userProjectTaskMap.has(User_Id)) {\n                        userProjectTaskMap.set(User_Id, { projects: new Set(), tasks: new Set() });\n                    }\n\n                    if (company) {\n                        userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n                    }\n\n                    if (taskDetails) {\n                        userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n                    }\n                }\n            });\n\n            const statusCounts = timesheetData.reduce((acc, item) => {\n                acc[item.Status] = (acc[item.Status] || 0) + 1;\n                return acc;\n            }, {});\n            setStatusCounts(statusCounts);\n\n\n            //   const projectCounts = calculateProjectCounts(userProjectTaskMap);\n            //   setProjectCounts(projectCounts);\n\n            const projectCounts = {};\n            employeeData.forEach((employee) => {\n                const projects = userProjectTaskMap.get(employee.Emp_ID)?.projects || new Set();\n\n                projects.forEach((project) => {\n                    if (!projectCounts[project]) {\n                        projectCounts[project] = 0;\n                    }\n                    projectCounts[project] += 1; // Increment the count for each project the employee is working on\n                });\n            });\n\n            setProjectCounts(projectCounts);\n\n\n            const processedData = employeeData.map((employee) => {\n                const projectSet = userProjectTaskMap.get(employee.Emp_ID)?.projects || new Set();\n                const taskSet = userProjectTaskMap.get(employee.Emp_ID)?.tasks || new Set();\n\n                const formattedProjects = [...projectSet].length > 0\n                    ? [...projectSet].join(', ')\n                    : 'No project assigned';\n\n                const formattedTasks = [...taskSet].length > 0\n                    ? [...taskSet].join(', ')\n                    : 'No task assigned';\n\n                return {\n                    id: employee.Emp_ID,\n                    name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n                    email: employee.User_Email || 'N/A',\n                    status: employee.User_Status || 'N/A',\n                    companyName: formattedProjects,\n                    taskName: formattedTasks,\n                };\n            });\n\n            // const customSearchFunction = (rows, searchText) => {\n            //     return rows.filter((row) => {\n            //       // Convert both row name and search text to lowercase to ensure case-insensitive matching\n            //       const fullName = row.original.name.toLowerCase();\n            //       const query = searchText.toLowerCase();\n                  \n            //       // Return rows where the name contains the exact search text\n            //       return fullName.includes(query);\n            //     });\n            //   };\n\n            const totalMinutes = calculateTotalHours(timesheetData);\n            const processedDataWithHours = processedData.map((employee) => ({\n                ...employee,\n                totalHours: totalMinutes[employee.id] ? convertToHoursAndMinutes(totalMinutes[employee.id]) : { hours: 0, mins: 0 },\n            }));\n\n            // Only update state if data has changed\n            if (JSON.stringify(processedDataWithHours) !== JSON.stringify(employeesData)) {\n                setEmployeesData(processedDataWithHours);\n                setTotalEmployees(processedDataWithHours.length);\n            }\n\n        } catch (error) {\n            setError('An error occurred while fetching employee data.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n        const interval = setInterval(fetchData, 2000); // You can adjust the interval as needed\n        return () => clearInterval(interval);\n    }, [employeesData]); // Add employeesData to dependency array\n\n    // Define columns for Material React Table\n    const columns = useMemo(() => [\n        {\n          accessorKey: 'name',\n          header: 'Employee Name',\n          size: 150,\n        },\n        {\n          accessorKey: 'email',\n          header: 'Email',\n          size: 200,\n        },\n        {\n          accessorKey: 'status',\n          header: 'Employee Status',\n          size: 150,\n        },\n        {\n          accessorKey: 'companyName',\n          header: 'Project',\n          size: 200,\n        },\n        {\n          accessorKey: 'taskName',\n          header: 'Task',\n          size: 200,\n        },\n        {\n          accessorKey: 'totalHours',\n          header: 'Time',\n          size: 150,\n          Cell: ({ cell }) => `${cell.getValue().hours} hrs ${cell.getValue().mins} mins`,\n        },\n      ], []);\n    \n      const table = useMaterialReactTable({\n        columns,\n        data: employeesData,\n        state: { isLoading: loading, pagination },\n        onPaginationChange: setPagination,\n        enableFullScreenToggle: false,\n        globalFilterFn: 'contains',\n      });\n    \n      return (\n        <div className=\"Overview-container\">\n          <h1 className=\"title\">Employee Time Sheet</h1>\n          <div className=\"counts-container\">\n            <p className=\"EmployeeCount\">Total Number of Employees: {totalEmployees}</p>\n            <p className=\"TimeCount\">Total Time: {totalHours.hours} hrs {totalHours.mins} mins</p>\n          </div>\n          <div className=\"EmployeeTable\">\n            {error ? (\n              <p className=\"error-text\">{error}</p>\n            ) : (\n              <MaterialReactTable table={table} />\n            )}\n          </div>\n          {/* <div className=\"final-container\"> */}\n            <div className=\"chart-container\">\n              <div className=\"chart1\">\n                <h2>Status Breakdown</h2>\n                <BarChart\n                  data={Object.entries(statusCounts).map(([key, value]) => ({ name: key, value }))}\n                  title=\"Employee Status Distribution\"\n                />\n              </div>\n            </div>\n            <div className=\"chart-container\">\n              <div className=\"chart2\">\n                <h2>Projects Breakdown</h2>\n                <BarChart\n                  data={Object.entries(projectCounts).map(([key, value]) => ({ name: key, value }))}\n                  title=\"Projects Distribution\"\n                />\n              </div>\n            </div>\n          {/* </div> */}\n        </div>\n      );\n    };\n    \n    export default Overview;\n    "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}