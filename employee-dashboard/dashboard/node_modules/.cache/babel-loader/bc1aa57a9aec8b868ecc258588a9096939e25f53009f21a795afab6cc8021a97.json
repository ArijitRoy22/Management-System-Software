{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport GradientPieChart from './GradientPieChart'; // Import the new GradientPieChart component\nimport LineChart from './LineChart'; // Import the LineChart component\n// import './Location.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Project = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  _s(useEffect(_s(() => {\n    _s();\n    const [employeesData, setEmployeesData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [totalEmployees, setTotalEmployees] = useState(0);\n    const [totalHours, setTotalHours] = useState({\n      hours: 0,\n      mins: 0\n    });\n    const [statusCounts, setStatusCounts] = useState({});\n    const [projectCounts, setProjectCounts] = useState({});\n    const [pagination, setPagination] = useState({\n      pageIndex: 0,\n      pageSize: 5 // Set the default page size\n    });\n    const cleanFieldNames = data => {\n      return data.map(item => {\n        const cleanedItem = {};\n        for (const [key, value] of Object.entries(item)) {\n          const cleanedKey = key.replace(/^\\uFEFF/, '');\n          cleanedItem[cleanedKey] = value;\n        }\n        return cleanedItem;\n      });\n    };\n    const fetchData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails'), axios.get('http://localhost:5001/Modules_Tasks')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n        const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n        const userProjectTaskMap = new Map();\n        timesheetData.forEach(entry => {\n          const {\n            User_Id,\n            project,\n            task\n          } = entry;\n          const company = companyDetailsData.find(company => company.company_id === project);\n          const taskDetails = moduleTaskData.find(module => module.m_slno === task);\n          if (company || taskDetails) {\n            if (!userProjectTaskMap.has(User_Id)) {\n              userProjectTaskMap.set(User_Id, {\n                projects: new Set(),\n                tasks: new Set()\n              });\n            }\n            if (company) {\n              userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n            }\n            if (taskDetails) {\n              userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n            }\n          }\n        });\n        const statusCounts = timesheetData.reduce((acc, item) => {\n          acc[item.Status] = (acc[item.Status] || 0) + 1;\n          return acc;\n        }, {});\n        setStatusCounts(statusCounts);\n\n        //   const projectCounts = calculateProjectCounts(userProjectTaskMap);\n        //   setProjectCounts(projectCounts);\n\n        const projectCounts = {};\n        employeeData.forEach(employee => {\n          var _userProjectTaskMap$g;\n          const projects = ((_userProjectTaskMap$g = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g === void 0 ? void 0 : _userProjectTaskMap$g.projects) || new Set();\n          projects.forEach(project => {\n            if (!projectCounts[project]) {\n              projectCounts[project] = 0;\n            }\n            projectCounts[project] += 1; // Increment the count for each project the employee is working on\n          });\n        });\n        setProjectCounts(projectCounts);\n        const processedData = companyDetailsData.map(company => {\n          var _userProjectTaskMap$g2, _userProjectTaskMap$g3;\n          const projectSet = ((_userProjectTaskMap$g2 = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g2 === void 0 ? void 0 : _userProjectTaskMap$g2.projects) || new Set();\n          const taskSet = ((_userProjectTaskMap$g3 = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g3 === void 0 ? void 0 : _userProjectTaskMap$g3.tasks) || new Set();\n          const formattedProjects = [...projectSet].length > 0 ? [...projectSet].join(', ') : 'No project assigned';\n          const formattedTasks = [...taskSet].length > 0 ? [...taskSet].join(', ') : 'No task assigned';\n          return {\n            id: company.company_id,\n            name: `${company.company_name}` || 'N/A',\n            client_name: `${company.client_name}` || 'N/A',\n            status: company.status || 'N/A',\n            companyName: formattedProjects,\n            taskName: formattedTasks\n          };\n        });\n        if (JSON.stringify(processedDataWithHours) !== JSON.stringify(employeesData)) {\n          setEmployeesData(processedDataWithHours);\n          setTotalEmployees(processedDataWithHours.length);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n  }, \"ScXrh6Ro2g6CWTmJvvSO36OojCo=\"), [employeesData]), \"ScXrh6Ro2g6CWTmJvvSO36OojCo=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Porject Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n};\n_s2(Project, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Project;\nexport default Project;\nvar _c;\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"names":["React","useState","useEffect","axios","GradientPieChart","LineChart","jsxDEV","_jsxDEV","Project","_s2","_s","$RefreshSig$","employeesData","setEmployeesData","loading","setLoading","error","setError","totalEmployees","setTotalEmployees","totalHours","setTotalHours","hours","mins","statusCounts","setStatusCounts","projectCounts","setProjectCounts","pagination","setPagination","pageIndex","pageSize","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","moduleTaskResponse","Promise","all","get","employeeData","timesheetData","rawCompanyDetailsData","moduleTaskData","companyDetailsData","userProjectTaskMap","Map","forEach","entry","User_Id","project","task","company","find","company_id","taskDetails","module","m_slno","has","set","projects","Set","tasks","add","company_name","mod_name","reduce","acc","Status","employee","_userProjectTaskMap$g","Emp_ID","processedData","_userProjectTaskMap$g2","_userProjectTaskMap$g3","projectSet","taskSet","formattedProjects","length","join","formattedTasks","id","name","client_name","status","companyName","taskName","JSON","stringify","processedDataWithHours","console","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Project.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport GradientPieChart from './GradientPieChart'; // Import the new GradientPieChart component\nimport LineChart from './LineChart'; // Import the LineChart component\n// import './Location.css';\n\nconst Project = () => {\n\n    useEffect(() => {\n\n        const [employeesData, setEmployeesData] = useState([]);\n        const [loading, setLoading] = useState(true);\n        const [error, setError] = useState(null);\n        const [totalEmployees, setTotalEmployees] = useState(0);\n        const [totalHours, setTotalHours] = useState({ hours: 0, mins: 0 });\n        const [statusCounts, setStatusCounts] = useState({});\n        const [projectCounts, setProjectCounts] = useState({});\n        const [pagination, setPagination] = useState({\n            pageIndex: 0,\n            pageSize: 5, // Set the default page size\n        });\n\n        const cleanFieldNames = (data) => {\n            return data.map((item) => {\n                const cleanedItem = {};\n                for (const [key, value] of Object.entries(item)) {\n                    const cleanedKey = key.replace(/^\\uFEFF/, '');\n                    cleanedItem[cleanedKey] = value;\n                }\n                return cleanedItem;\n            });\n        };\n\n        const fetchData = async () => {\n            try {\n                const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([\n                    axios.get('http://localhost:5001/Employee_Data1'),\n                    axios.get('http://localhost:5001/timesheet'),\n                    axios.get('http://localhost:5001/CompanyDetails'),\n                    axios.get('http://localhost:5001/Modules_Tasks'),\n                ]);\n\n                const employeeData = employeeResponse.data;\n                const timesheetData = timesheetResponse.data;\n                const rawCompanyDetailsData = companyDetailsResponse.data;\n                const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n                const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n                const userProjectTaskMap = new Map();\n                timesheetData.forEach((entry) => {\n                    const { User_Id, project, task } = entry;\n                    const company = companyDetailsData.find(\n                        (company) => company.company_id === project\n                    );\n                    const taskDetails = moduleTaskData.find(\n                        (module) => module.m_slno === task\n                    );\n\n                    if (company || taskDetails) {\n                        if (!userProjectTaskMap.has(User_Id)) {\n                            userProjectTaskMap.set(User_Id, { projects: new Set(), tasks: new Set() });\n                        }\n\n                        if (company) {\n                            userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n                        }\n\n                        if (taskDetails) {\n                            userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n                        }\n                    }\n                });\n\n                const statusCounts = timesheetData.reduce((acc, item) => {\n                    acc[item.Status] = (acc[item.Status] || 0) + 1;\n                    return acc;\n                }, {});\n                setStatusCounts(statusCounts);\n\n\n                //   const projectCounts = calculateProjectCounts(userProjectTaskMap);\n                //   setProjectCounts(projectCounts);\n\n                const projectCounts = {};\n                employeeData.forEach((employee) => {\n                    const projects = userProjectTaskMap.get(employee.Emp_ID)?.projects || new Set();\n\n                    projects.forEach((project) => {\n                        if (!projectCounts[project]) {\n                            projectCounts[project] = 0;\n                        }\n                        projectCounts[project] += 1; // Increment the count for each project the employee is working on\n                    });\n                });\n\n                setProjectCounts(projectCounts);\n\n\n                const processedData = companyDetailsData.map((company) => {\n                    const projectSet = userProjectTaskMap.get(employee.Emp_ID)?.projects || new Set();\n                    const taskSet = userProjectTaskMap.get(employee.Emp_ID)?.tasks || new Set();\n\n                    const formattedProjects = [...projectSet].length > 0\n                        ? [...projectSet].join(', ')\n                        : 'No project assigned';\n\n                    const formattedTasks = [...taskSet].length > 0\n                        ? [...taskSet].join(', ')\n                        : 'No task assigned';\n\n                    return {\n                        id: company.company_id,\n                        name: `${company.company_name}` || 'N/A',\n                        client_name: `${company.client_name}` || 'N/A',\n                        status: company.status || 'N/A',\n                        companyName: formattedProjects,\n                        taskName: formattedTasks,\n                    };\n                });\n\n\n                if (JSON.stringify(processedDataWithHours) !== JSON.stringify(employeesData)) {\n                    setEmployeesData(processedDataWithHours);\n                    setTotalEmployees(processedDataWithHours.length);\n                }\n\n            }\n            catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n\n        fetchData();\n        const interval = setInterval(fetchData, 2000);\n\n        return () => clearInterval(interval);\n    }, [employeesData]);\n\n    return (\n        <div className='Overview-container'>\n            <h1 className='title'>Porject Details</h1>\n\n        </div>\n    );\n};\n\nexport default Project;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}