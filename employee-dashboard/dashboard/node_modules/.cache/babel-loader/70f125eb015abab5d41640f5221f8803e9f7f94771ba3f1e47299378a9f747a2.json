{"ast":null,"code":"var _jsxFileName = \"/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport axios from 'axios';\nimport './Overview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Overview = () => {\n  _s();\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const cleanFieldNames = data => {\n    return data.map(item => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([axios.get('http://localhost:5001/Employee_Data1'), axios.get('http://localhost:5001/timesheet'), axios.get('http://localhost:5001/CompanyDetails'), axios.get('http://localhost:5001/Modules_Tasks')]);\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n        const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n\n        // Clean the company details data\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n        // Process unique user_id, project, and task pairs\n        const userProjectTaskMap = new Map();\n        timesheetData.forEach(entry => {\n          const {\n            User_Id,\n            project,\n            task\n          } = entry;\n          const company = companyDetailsData.find(company => company.company_id === project);\n          const taskDetails = moduleTaskData.find(module => module.m_slno === task);\n          if (company || taskDetails) {\n            if (!userProjectTaskMap.has(User_Id)) {\n              userProjectTaskMap.set(User_Id, {\n                projects: new Set(),\n                tasks: new Set()\n              });\n            }\n            if (company) {\n              userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n            }\n            if (taskDetails) {\n              userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n            }\n          }\n        });\n\n        // Process employee data for display in table\n        const processedData = employeeData.map((employee, index) => {\n          var _userProjectTaskMap$g, _userProjectTaskMap$g2;\n          const projectSet = ((_userProjectTaskMap$g = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g === void 0 ? void 0 : _userProjectTaskMap$g.projects) || new Set();\n          const taskSet = ((_userProjectTaskMap$g2 = userProjectTaskMap.get(employee.Emp_ID)) === null || _userProjectTaskMap$g2 === void 0 ? void 0 : _userProjectTaskMap$g2.tasks) || new Set();\n          const formattedProjects = [...projectSet].length > 0 ? [...projectSet].join(', ') : 'No project assigned';\n          const formattedTasks = [...taskSet].length > 0 ? [...taskSet].join(', ') : 'No task assigned';\n          return {\n            id: index,\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            companyName: formattedProjects,\n            taskName: formattedTasks\n          };\n        });\n        setEmployeesData(processedData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  const columns = [{\n    field: 'name',\n    headerName: 'Employee Name',\n    width: 150\n  }, {\n    field: 'email',\n    headerName: 'Email',\n    width: 200\n  }, {\n    field: 'status',\n    headerName: 'Status',\n    width: 130\n  }, {\n    field: 'companyName',\n    headerName: 'Project',\n    width: 200\n  }, {\n    field: 'taskName',\n    headerName: 'Task',\n    width: 200\n  }, {\n    field: 'taskName',\n    headerName: 'Task',\n    width: 200\n  }, {\n    field: 'taskName',\n    headerName: 'Task',\n    width: 200\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Overview-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Employee Time Sheet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EmployeeTable\",\n      children: loading && !error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading-text\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 400,\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: employeesData,\n          columns: columns,\n          pageSize: 5,\n          rowsPerPageOptions: [5, 10, 15],\n          disableSelectionOnClick: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(Overview, \"55THOB/m7eZcGNdMGjyDf1FNpOg=\");\n_c = Overview;\nexport default Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["React","useState","useEffect","DataGrid","axios","jsxDEV","_jsxDEV","Overview","_s","employeesData","setEmployeesData","loading","setLoading","error","setError","cleanFieldNames","data","map","item","cleanedItem","key","value","Object","entries","cleanedKey","replace","fetchData","employeeResponse","timesheetResponse","companyDetailsResponse","moduleTaskResponse","Promise","all","get","employeeData","timesheetData","rawCompanyDetailsData","moduleTaskData","companyDetailsData","userProjectTaskMap","Map","forEach","entry","User_Id","project","task","company","find","company_id","taskDetails","module","m_slno","has","set","projects","Set","tasks","add","company_name","mod_name","processedData","employee","index","_userProjectTaskMap$g","_userProjectTaskMap$g2","projectSet","Emp_ID","taskSet","formattedProjects","length","join","formattedTasks","id","name","User_Fname","User_Lname","email","User_Email","status","User_Status","companyName","taskName","interval","setInterval","clearInterval","columns","field","headerName","width","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","rows","pageSize","rowsPerPageOptions","disableSelectionOnClick","_c","$RefreshReg$"],"sources":["/Users/arijitroy/kafka/Codes/employee-dashboard/dashboard/src/components/Overview.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport axios from 'axios';\nimport './Overview.css';\n\nconst Overview = () => {\n  const [employeesData, setEmployeesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const cleanFieldNames = (data) => {\n    return data.map((item) => {\n      const cleanedItem = {};\n      for (const [key, value] of Object.entries(item)) {\n        const cleanedKey = key.replace(/^\\uFEFF/, ''); // Remove BOM if present\n        cleanedItem[cleanedKey] = value;\n      }\n      return cleanedItem;\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [employeeResponse, timesheetResponse, companyDetailsResponse, moduleTaskResponse] = await Promise.all([\n          axios.get('http://localhost:5001/Employee_Data1'),\n          axios.get('http://localhost:5001/timesheet'),\n          axios.get('http://localhost:5001/CompanyDetails'),\n          axios.get('http://localhost:5001/Modules_Tasks'),\n        ]);\n\n        const employeeData = employeeResponse.data;\n        const timesheetData = timesheetResponse.data;\n        const rawCompanyDetailsData = companyDetailsResponse.data;\n        const moduleTaskData = cleanFieldNames(moduleTaskResponse.data);\n\n        // Clean the company details data\n        const companyDetailsData = cleanFieldNames(rawCompanyDetailsData);\n\n        // Process unique user_id, project, and task pairs\n        const userProjectTaskMap = new Map();\n        timesheetData.forEach((entry) => {\n          const { User_Id, project, task } = entry;\n          const company = companyDetailsData.find(\n            (company) => company.company_id === project\n          );\n\n          const taskDetails = moduleTaskData.find(\n            (module) => module.m_slno === task\n          );\n\n          if (company || taskDetails) {\n            if (!userProjectTaskMap.has(User_Id)) {\n              userProjectTaskMap.set(User_Id, { projects: new Set(), tasks: new Set() });\n            }\n\n            if (company) {\n              userProjectTaskMap.get(User_Id).projects.add(company.company_name);\n            }\n\n            if (taskDetails) {\n              userProjectTaskMap.get(User_Id).tasks.add(taskDetails.mod_name);\n            }\n          }\n        });\n\n        // Process employee data for display in table\n        const processedData = employeeData.map((employee, index) => {\n          const projectSet = userProjectTaskMap.get(employee.Emp_ID)?.projects || new Set();\n          const taskSet = userProjectTaskMap.get(employee.Emp_ID)?.tasks || new Set();\n\n          const formattedProjects = [...projectSet].length > 0\n            ? [...projectSet].join(', ')\n            : 'No project assigned';\n\n          const formattedTasks = [...taskSet].length > 0\n            ? [...taskSet].join(', ')\n            : 'No task assigned';\n\n          return {\n            id: index,\n            name: `${employee.User_Fname} ${employee.User_Lname}` || 'N/A',\n            email: employee.User_Email || 'N/A',\n            status: employee.User_Status || 'N/A',\n            companyName: formattedProjects,\n            taskName: formattedTasks,\n          };\n        });\n\n        setEmployeesData(processedData);\n      } catch (error) {\n        setError('An error occurred while fetching employee data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const columns = [\n    { field: 'name', headerName: 'Employee Name', width: 150 },\n    { field: 'email', headerName: 'Email', width: 200 },\n    { field: 'status', headerName: 'Status', width: 130 },\n    { field: 'companyName', headerName: 'Project', width: 200 },\n    { field: 'taskName', headerName: 'Task', width: 200 },\n    { field: 'taskName', headerName: 'Task', width: 200 },\n    { field: 'taskName', headerName: 'Task', width: 200 },\n  ];\n\n  return (\n    <div className=\"Overview-container\">\n      <h1 className=\"title\">Employee Time Sheet</h1>\n      <div className=\"EmployeeTable\">\n        {loading && !error ? (\n          <p className=\"loading-text\">Loading...</p>\n        ) : error ? (\n          <p className=\"error-text\">{error}</p>\n        ) : (\n          <div style={{ height: 400, width: '100%' }}>\n            <DataGrid\n              rows={employeesData}\n              columns={columns}\n              pageSize={5}\n              rowsPerPageOptions={[5, 10, 15]}\n              disableSelectionOnClick\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Overview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}